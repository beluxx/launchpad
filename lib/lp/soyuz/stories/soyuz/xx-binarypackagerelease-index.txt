= BinaryPackageRelease Pages =

The page for a 'successfully built' build provides link(s) to the produced
binaries independent of their context, the raw IBinaryPackageRelease
content class/page.

Let's find a build that produced some binaries:

  >>> browser.open("http://launchpad.test/ubuntu/+builds")
  >>> browser.getControl(name="build_state").value = ['built']
  >>> browser.getControl("Filter").click()
  >>> browser.getLink("Next").click()
  >>> build_link = browser.getLink(
  ...     'i386 build of mozilla-firefox 0.9 in ubuntu '
  ...     'warty RELEASE')
  >>> build_link.url
  'http://launchpad.test/ubuntu/+source/mozilla-firefox/0.9/+build/2'

Next, we'll manually create a suitable package upload record for our
build:
XXX: noodles 2009-01-16 bug 317863: move this into the STP.

  >>> from lp.soyuz.model.queue import PackageUploadBuild
  >>> from lp.soyuz.interfaces.binarypackagebuild import (
  ...     IBinaryPackageBuildSet)
  >>> from lp.registry.interfaces.pocket import (
  ...     PackagePublishingPocket)
  >>> from zope.component import getUtility

  >>> login('foo.bar@canonical.com')
  >>> build = getUtility(IBinaryPackageBuildSet).getByID(2)
  >>> package_upload = build.distro_series.createQueueEntry(
  ...     PackagePublishingPocket.UPDATES, build.archive,
  ...    'changes.txt', 'my changes')
  >>> package_upload_build = PackageUploadBuild(
  ...     packageupload =package_upload,
  ...     build=build)
  >>> package_upload.setDone()
  >>> logout()

  >>> build_link.click()
  >>> browser.url
  'http://launchpad.test/ubuntu/+source/mozilla-firefox/0.9/+build/2'

This build produced one BinaryPackage, called 'mozilla-firefox 0.9',
which is presented in the right portlet, called 'Resulting Binaries'.
Let's just check if the page is presented without errors (see bug
#76163):

  >>> browser.getLink('mozilla-firefox 0.9').click()
  >>> browser.url
  'http://launchpad.test/ubuntu/warty/i386/mozilla-firefox/0.9'

When rendering package relationships only existent packages contain
links to within LP application, not found packages are rendered as
simple text.

'Provides', 'Pre-Depends', 'Enhances' and 'Breaks' sections contain
links to a binary in the context in question.

  >>> def print_relation(id):
  ...     section = find_tag_by_id(browser.contents, id)
  ...     parse_relationship_section(str(section))

  >>> print_relation('provides')
  LINK: "mozilla-firefox" -> http://launchpad.test/ubuntu/warty/i386/mozilla-firefox

  >>> print_relation('predepends')
  TEXT: "foo"
  LINK: "pmount" -> http://launchpad.test/ubuntu/warty/i386/pmount

  >>> print_relation('enhances')
  TEXT: "bar"
  LINK: "pmount" -> http://launchpad.test/ubuntu/warty/i386/pmount


  >>> print_relation('breaks')
  TEXT: "baz"
  LINK: "pmount" -> http://launchpad.test/ubuntu/warty/i386/pmount


'Depends', 'Conflicts', 'Replaces', 'Suggests' and 'Recommends'
sections contain only unsatisfied dependencies, which are rendered as
text:

  >>> print_relation('depends')
  TEXT: "gcc-3.4 (&gt;= 3.4.1-4sarge1)"
  TEXT: "gcc-3.4 (&lt;&lt; 3.4.2)"
  TEXT: "gcc-3.4-base"
  TEXT: "libc6 (&gt;= 2.3.2.ds1-4)"
  TEXT: "libstdc++6-dev (&gt;= 3.4.1-4sarge1)"

  >>> print_relation('conflicts')
  TEXT: "firefox"
  TEXT: "mozilla-web-browser"

  >>> print_relation('suggests')
  TEXT: "firefox-gnome-support (= 1.0.7-0ubuntu20)"
  TEXT: "latex-xft-fonts"
  TEXT: "xprint"

  >>> print_relation('replaces')
  TEXT: "gnome-mozilla-browser"

  >>> print_relation('recommends')
  TEXT: "gcc-3.4 (&gt;= 3.4.1-4sarge1)"
  TEXT: "gcc-3.4 (&lt;&lt; 3.4.2)"
  TEXT: "gcc-3.4-base"
  TEXT: "libc6 (&gt;= 2.3.2.ds1-4)"
  TEXT: "libstdc++6-dev (&gt;= 3.4.1-4sarge1)"

Even when there is no information to present and the package control
files don't contain the field, we still present the  corresponding
relationship section.

  >>> browser.open('http://launchpad.test/ubuntu/warty/i386/pmount/0.1-1')
  >>> print_relation('predepends')
  EMPTY SECTION

