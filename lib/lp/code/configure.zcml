<!-- Copyright 2009-2011 Canonical Ltd.  This software is licensed under the
     GNU Affero General Public License version 3 (see the file LICENSE).
-->

<configure
    xmlns="http://namespaces.zope.org/zope"
    xmlns:browser="http://namespaces.zope.org/browser"
    xmlns:i18n="http://namespaces.zope.org/i18n"
    xmlns:lp="http://namespaces.canonical.com/lp"
    xmlns:xmlrpc="http://namespaces.zope.org/xmlrpc"
    xmlns:webservice="http://namespaces.canonical.com/webservice"
    i18n_domain="launchpad">
  <include package=".browser"/>
  <include package=".vocabularies"/>
  <authorizations module="lp.code.security" />

  <publisher
      name="code"
      factory="lp.code.publisher.code_request_publication_factory"/>
  <utility
      component="lp.code.publisher.CodeLayer"
      provides="zope.publisher.interfaces.browser.IDefaultBrowserLayer"
      name="code" />

  <!-- Branch Merge Queues -->
  <securedutility
     component="lp.code.model.branchmergequeue.BranchMergeQueue"
     provides="lp.code.interfaces.branchmergequeue.IBranchMergeQueueSource">
    <allow interface="lp.code.interfaces.branchmergequeue.IBranchMergeQueueSource"/>

  </securedutility>

  <class class="lp.code.model.branchmergequeue.BranchMergeQueue">
    <require permission="zope.Public"
             attributes="registrant owner name description configuration
                         date_created branches" />
    <require permission="launchpad.Edit"
             attributes="setMergeQueueConfig"
             set_attributes="owner name description configuration" />
  </class>

  <class class="lp.code.model.codereviewvote.CodeReviewVoteReference">
    <allow interface="lp.code.interfaces.codereviewvote.ICodeReviewVoteReferencePublic"/>
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.codereviewvote.ICodeReviewVoteReferenceEdit"/>
  </class>
  <subscriber
      for="lp.code.interfaces.codereviewvote.ICodeReviewVoteReference
           lp.code.interfaces.event.IReviewerNominatedEvent"
      handler="lp.code.subscribers.branchmergeproposal.review_requested"/>

  <!-- CodeImportMachine -->

  <class class="lp.code.model.codeimportmachine.CodeImportMachine">
    <implements interface="lp.code.interfaces.codeimportmachine.ICodeImportMachine"/>
    <allow attributes="
                    id
                    state
                    hostname
                    current_jobs
                    date_created
                    heartbeat
                    events
                    shouldLookForJob"/>
    <require permission="launchpad.Edit"
             attributes="
                         setOnline
                         setOffline
                         setQuiescing"/>

    <!-- ICodeImportMachine has no set_schema, because all modifications
         should be done through methods that create CodeImportEvent objects when
         appropriate. -->
  </class>

  <!-- CodeImportMachineSet -->

  <securedutility
      class="lp.code.model.codeimportmachine.CodeImportMachineSet"
      provides="lp.code.interfaces.codeimportmachine.ICodeImportMachineSet">
    <allow interface="lp.code.interfaces.codeimportmachine.ICodeImportMachineSet"/>
  </securedutility>

  <!-- BranchRef -->

  <class class="lp.code.browser.branchref.BranchRef">
    <allow interface="lp.code.interfaces.branchref.IBranchRef"/>
  </class>

  <!-- static content view -->

  <class class="lp.code.browser.branchref.StaticContentView">
    <allow attributes="browserDefault
                       __call__"/>
  </class>
  <class class="lp.code.model.branchmergequeuecollection.GenericBranchMergeQueueCollection">
    <allow interface="lp.code.interfaces.branchmergequeuecollection.IBranchMergeQueueCollection"/>
  </class>
  <class class="lp.code.model.branchmergequeuecollection.VisibleBranchMergeQueueCollection">
    <allow interface="lp.code.interfaces.branchmergequeuecollection.IBranchMergeQueueCollection"/>
  </class>
  <class class="lp.code.model.branchcollection.GenericBranchCollection">
    <allow interface="lp.code.interfaces.branchcollection.IBranchCollection"/>
  </class>
  <class class="lp.code.model.branchcollection.AnonymousBranchCollection">
    <allow interface="lp.code.interfaces.branchcollection.IBranchCollection"/>
  </class>
  <class class="lp.code.model.branchcollection.VisibleBranchCollection">
    <allow interface="lp.code.interfaces.branchcollection.IBranchCollection"/>
  </class>
  <adapter
      for="storm.store.Store"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.model.branchcollection.GenericBranchCollection"/>
  <adapter
      for="lp.registry.interfaces.person.IPerson"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_person"/>
  <adapter
      for="lp.registry.interfaces.product.IProduct"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_product"/>
  <adapter
      for="lp.registry.interfaces.personproduct.IPersonProduct"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_person_product"/>
  <adapter
      for="lp.registry.interfaces.projectgroup.IProjectGroup"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_project"/>
  <adapter
      for="lp.registry.interfaces.distribution.IDistribution"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_distribution"/>
  <adapter
      for="lp.registry.interfaces.distroseries.IDistroSeries"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_distro_series"/>
  <adapter
      for="lp.registry.interfaces.sourcepackage.ISourcePackage"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_source_package"/>
  <adapter
      for="lp.registry.interfaces.distributionsourcepackage.IDistributionSourcePackage"
      provides="lp.code.interfaces.branchcollection.IBranchCollection"
      factory="lp.code.adapters.branchcollection.branch_collection_for_distro_source_package"/>
  <securedutility
      class="lp.code.model.branchcollection.GenericBranchCollection"
      provides="lp.code.interfaces.branchcollection.IAllBranches">
    <allow interface="lp.code.interfaces.branchcollection.IAllBranches"/>
  </securedutility>
  <class class="lp.code.model.revisioncache.GenericRevisionCollection">
    <allow interface="lp.code.interfaces.revisioncache.IRevisionCollection"/>
  </class>
  <securedutility
      class="lp.code.model.revisioncache.GenericRevisionCollection"
      provides="lp.code.interfaces.revisioncache.IRevisionCache">
    <allow interface="lp.code.interfaces.revisioncache.IRevisionCache"/>
  </securedutility>
  <securedutility
      class="lp.code.model.branchmergequeuecollection.GenericBranchMergeQueueCollection"
      provides="lp.code.interfaces.branchmergequeuecollection.IAllBranchMergeQueues">
    <allow interface="lp.code.interfaces.branchmergequeuecollection.IAllBranchMergeQueues"/>
  </securedutility>
  <adapter
      for="lp.registry.interfaces.person.IPerson"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_person"/>
  <adapter
      for="lp.registry.interfaces.product.IProduct"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_product"/>
  <adapter
      for="lp.registry.interfaces.projectgroup.IProjectGroup"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_project"/>
  <adapter
      for="lp.registry.interfaces.distribution.IDistribution"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_distribution"/>
  <adapter
      for="lp.registry.interfaces.distroseries.IDistroSeries"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_distro_series"/>
  <adapter
      for="lp.registry.interfaces.sourcepackage.ISourcePackage"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_source_package"/>
  <adapter
      for="lp.registry.interfaces.distributionsourcepackage.IDistributionSourcePackage"
      provides="lp.code.interfaces.revisioncache.IRevisionCache"
      factory="lp.code.adapters.revisioncache.revision_cache_for_distro_source_package"/>
  <securedutility
      class="lp.code.model.branchpuller.BranchPuller"
      provides="lp.code.interfaces.branchpuller.IBranchPuller">
    <allow interface="lp.code.interfaces.branchpuller.IBranchPuller"/>
  </securedutility>
  <securedutility
      class="canonical.launchpad.systemhomes.BazaarApplication"
      provides="canonical.launchpad.interfaces.launchpad.IBazaarApplication">
    <allow interface="canonical.launchpad.interfaces.launchpad.IBazaarApplication"/>
  </securedutility>

  <!-- pages for the bazaar application -->

  <xmlrpc:view
      for="canonical.launchpad.interfaces.launchpad.IBazaarApplication"
      interface="lp.code.xmlrpc.branch.IBranchSetAPI"
      class="lp.code.xmlrpc.branch.BranchSetAPI"
      permission="launchpad.AnyPerson"/>
  <xmlrpc:view
      for="canonical.launchpad.interfaces.launchpad.IBazaarApplication"
      interface="lp.code.xmlrpc.branch.IPublicCodehostingAPI"
      class="lp.code.xmlrpc.branch.PublicCodehostingAPI"
      permission="zope.Public"/>

  <!-- Branch Merge Proposal -->

  <class class="lp.code.model.branchmergeproposal.BranchMergeProposal">
    <allow attributes="
                    address
                    id
                    registrant
                    source_branch
                    target_branch
                    prerequisite_branch
                    description
                    whiteboard
                    queue_status
                    private
                    reviewer
                    reviewed_revision_id
                    queuer
                    queue_position
                    queued_revision_id
                    commit_message
                    date_queued
                    merged_revno
                    date_merged
                    merge_reporter
                    supersedes
                    superseded_by
                    title
                    date_created
                    date_review_requested
                    date_reviewed
                    next_preview_diff_job
                    preview_diff
                    getIncrementalDiffs
                    votes
                    all_comments
                    getRelatedBugTasks
                    revision_end_date
                    isMergable
                    getComment
                    getRevisionsSinceReviewStart
                    getNotificationRecipients
                    getVoteReference
                    isValidTransition
                    getUnlandedSourceBranchRevisions
                    root_message_id
                    getUsersVoteReference
                    generateIncrementalDiff"/>
    <allow interface="lp.code.interfaces.branchtarget.IHasBranchTarget"/>
    <require
        permission="launchpad.Edit"
        set_attributes="description whiteboard merged_revno commit_message
                        root_message_id prerequisite_branch"
        attributes="
                    deleteProposal
                    setStatus
                    setAsWorkInProgress
                    requestReview
                    approveBranch
                    rejectBranch
                    markAsMerged
                    resubmit
                    enqueue
                    dequeue
                    moveToFrontOfQueue
                    nominateReviewer
                    updatePreviewDiff"/>
    <require
        permission="launchpad.AnyPerson"
        attributes="createComment
                    createCommentFromMessage"/>
  </class>

  <!-- Branch Merge Proposal Jobs -->

  <class class="lp.code.model.branchmergeproposaljob.CreateMergeProposalJob">
    <allow interface="lp.services.messages.interfaces.message.IMessageJob"/>
    <allow interface="lp.code.interfaces.branchmergeproposal.ICreateMergeProposalJob"/>
  </class>
  <securedutility
      component="lp.code.model.branchmergeproposaljob.CreateMergeProposalJob"
      provides="lp.code.interfaces.branchmergeproposal.ICreateMergeProposalJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.ICreateMergeProposalJobSource"/>
  </securedutility>

  <class class="lp.code.model.branchmergeproposaljob.MergeProposalNeedsReviewEmailJob">
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob"/>
    <allow interface="lp.code.interfaces.branchmergeproposal.IMergeProposalNeedsReviewEmailJob"/>
  </class>
  <securedutility
      component="lp.code.model.branchmergeproposaljob.MergeProposalNeedsReviewEmailJob"
      provides="lp.code.interfaces.branchmergeproposal.IMergeProposalNeedsReviewEmailJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.IMergeProposalNeedsReviewEmailJobSource"/>
  </securedutility>

  <securedutility
      component="lp.code.model.branchmergeproposaljob.BranchMergeProposalJobSource"
      provides="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJobSource"/>
  </securedutility>

  <class
  class="lp.code.model.branchmergeproposaljob.GenerateIncrementalDiffJob">
    <allow interface="lp.code.interfaces.branchmergeproposal.IGenerateIncrementalDiffJob"/>
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob" />
  </class>
  <class class="lp.code.model.branchmergeproposaljob.UpdatePreviewDiffJob">
    <allow interface="lp.code.interfaces.branchmergeproposal.IUpdatePreviewDiffJob" />
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob" />
  </class>
  <securedutility
      component="lp.code.model.branchmergeproposaljob.UpdatePreviewDiffJob"
      provides="lp.code.interfaces.branchmergeproposal.IUpdatePreviewDiffJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.IUpdatePreviewDiffJobSource"/>
  </securedutility>

  <class class="lp.code.model.branchmergeproposaljob.CodeReviewCommentEmailJob">
    <allow interface="lp.code.interfaces.branchmergeproposal.ICodeReviewCommentEmailJob" />
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob" />
  </class>
  <securedutility
      component="lp.code.model.branchmergeproposaljob.CodeReviewCommentEmailJob"
      provides="lp.code.interfaces.branchmergeproposal.ICodeReviewCommentEmailJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.ICodeReviewCommentEmailJobSource"/>
  </securedutility>

  <class class="lp.code.model.branchmergeproposaljob.ReviewRequestedEmailJob">
    <allow interface="lp.code.interfaces.branchmergeproposal.IReviewRequestedEmailJob" />
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob" />
  </class>
  <securedutility
      component="lp.code.model.branchmergeproposaljob.ReviewRequestedEmailJob"
      provides="lp.code.interfaces.branchmergeproposal.IReviewRequestedEmailJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.IReviewRequestedEmailJobSource"/>
  </securedutility>

  <class class="lp.code.model.branchmergeproposaljob.MergeProposalUpdatedEmailJob">
    <allow interface="lp.services.job.interfaces.job.IRunnableJob" />
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalJob" />
  </class>
  <securedutility
      component="lp.code.model.branchmergeproposaljob.MergeProposalUpdatedEmailJob"
      provides="lp.code.interfaces.branchmergeproposal.IMergeProposalUpdatedEmailJobSource">
    <allow interface="lp.code.interfaces.branchmergeproposal.IMergeProposalUpdatedEmailJobSource"/>
  </securedutility>

  <!-- Branch Merge Proposal Subscribers -->

  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lp.code.interfaces.event.INewBranchMergeProposalEvent"
      handler="lp.code.subscribers.branchmergeproposal.merge_proposal_created"/>
  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lp.code.interfaces.event.IBranchMergeProposalNeedsReviewEvent"
      handler="lp.code.subscribers.branchmergeproposal.merge_proposal_needs_review"/>
  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lazr.lifecycle.interfaces.IObjectModifiedEvent"
      handler="lp.code.subscribers.branchmergeproposal.merge_proposal_modified"/>
  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lp.code.interfaces.event.INewBranchMergeProposalEvent"
      handler="lp.code.subscribers.karma.branch_merge_proposed"/>
  <subscriber
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal
           lp.code.interfaces.event.IBranchMergeProposalStatusChangeEvent"
      handler="lp.code.subscribers.karma.branch_merge_status_changed"/>
  <adapter
      for="lp.code.interfaces.branchmergeproposal.IBranchMergeProposal"
      provides="canonical.launchpad.webapp.interfaces.IPrimaryContext"
      factory="lp.code.browser.branchmergeproposal.BranchMergeProposalPrimaryContext"/>

  <!-- hierarchy -->

  <securedutility
      class="lp.code.model.branchmergeproposal.BranchMergeProposalGetter"
      provides="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalGetter">
    <allow interface="lp.code.interfaces.branchmergeproposal.IBranchMergeProposalGetter"/>
  </securedutility>
  <class
      class="lp.code.model.seriessourcepackagebranch.SeriesSourcePackageBranch">
    <allow interface="lp.code.interfaces.seriessourcepackagebranch.ISeriesSourcePackageBranch"/>
  </class>

  <securedutility
     class="lp.code.model.seriessourcepackagebranch.SeriesSourcePackageBranchSet"
     provides="lp.code.interfaces.seriessourcepackagebranch.IFindOfficialBranchLinks">
    <allow interface="lp.code.interfaces.seriessourcepackagebranch.IFindOfficialBranchLinks"/>
  </securedutility>

  <!-- CodeImportResult -->

  <class class="lp.code.model.codeimportresult.CodeImportResult">
    <allow interface="lp.code.interfaces.codeimportresult.ICodeImportResult"/>
  </class>

  <!-- CodeImportResultSet -->

  <securedutility
      class="lp.code.model.codeimportresult.CodeImportResultSet"
      provides="lp.code.interfaces.codeimportresult.ICodeImportResultSet">
    <allow interface="lp.code.interfaces.codeimportresult.ICodeImportResultSet"/>
  </securedutility>
  <class class="lp.code.model.branchlookup.BranchLookup">
    <allow interface="lp.code.interfaces.branchlookup.IBranchLookup"/>
  </class>
  <securedutility
      class="lp.code.model.branchlookup.BranchLookup"
      provides="lp.code.interfaces.branchlookup.IBranchLookup">
    <allow interface="lp.code.interfaces.branchlookup.IBranchLookup"/>
  </securedutility>
  <securedutility
      class="lp.code.model.branchlookup.LinkedBranchTraverser"
      provides="lp.code.interfaces.branchlookup.ILinkedBranchTraverser">
    <allow interface="lp.code.interfaces.branchlookup.ILinkedBranchTraverser"/>
  </securedutility>
  <adapter factory="lp.code.model.branchlookup.ProductTraversable" />
  <adapter factory="lp.code.model.branchlookup.DistributionTraversable" />
  <adapter factory="lp.code.model.branchlookup.DistroSeriesTraversable" />

  <!-- BranchSubscription -->

  <class class="lp.code.model.branchsubscription.BranchSubscription">
    <allow interface="lp.code.interfaces.branchsubscription.IBranchSubscription"/>
    <allow interface="lp.code.interfaces.branchtarget.IHasBranchTarget"/>
    <require
        permission="zope.Public"
        set_schema="lp.code.interfaces.branchsubscription.IBranchSubscription"/>
  </class>
  <adapter
      for="lp.code.interfaces.branchsubscription.IBranchSubscription"
      provides="canonical.launchpad.webapp.interfaces.IPrimaryContext"
      factory="lp.code.browser.branchsubscription.BranchSubscriptionPrimaryContext"/>

  <!-- Branch -->

  <class class="lp.code.model.branch.Branch">
    <require
        permission="launchpad.View"
        interface="canonical.launchpad.interfaces.launchpad.IPrivacy
                   lp.code.interfaces.branch.IBranchAnyone
                   lp.code.interfaces.branch.IBranchEditableAttributes
                   lp.code.interfaces.branch.IBranchPublic
                   lp.code.interfaces.branch.IBranchView"
        attributes="merge_queue merge_queue_config"/>
    <require
        permission="launchpad.Edit"
        interface="lp.code.interfaces.branch.IBranchEdit"
        set_schema="lp.code.interfaces.branch.IBranchEditableAttributes"
        attributes="setPrivate addToQueue setMergeQueueConfig"
        set_attributes="branch_format control_format repository_format
                        branch_type
                        last_scanned last_scanned_id
                        last_mirrored last_mirrored_id next_mirror_time
                        revision_count mirror_failures
                        stacked_on mirror_status_message"/>
    <require
        permission="launchpad.AnyPerson"
        set_schema="lp.code.interfaces.branch.IBranchAnyone"/>
    <require
        permission="zope.Public"
        set_schema="lp.code.interfaces.branch.IBranchPublic"/>
  </class>
  <adapter
      for="lp.code.interfaces.branch.IBranch"
      provides="canonical.launchpad.webapp.interfaces.ILaunchpadContainer"
      factory="lp.code.publisher.LaunchpadBranchContainer"/>
  <adapter
      for="lp.code.interfaces.branch.IBranch"
      provides="lp.app.browser.badge.IHasBadges"
      factory="lp.code.browser.branchlisting.BranchBadges"/>
  <adapter
      for="lp.code.interfaces.branch.IBranch"
      provides="canonical.launchpad.webapp.interfaces.IPrimaryContext"
      factory="lp.code.model.branchtarget.branch_to_target"/>

  <subscriber
      for="lp.code.interfaces.branch.IBranch
           lazr.lifecycle.interfaces.IObjectCreatedEvent"
      handler="lp.code.subscribers.karma.branch_created"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.email.queue_tip_changed_email_jobs"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.bzrsync.schedule_diff_updates"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.bzrsync.schedule_translation_templates_build"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.bzrsync.schedule_translation_upload"/>
  <subscriber
      for="lp.codehosting.scanner.events.ITipChanged"
      handler="lp.codehosting.scanner.bzrsync.update_recipes"/>
  <subscriber
      for="lp.codehosting.scanner.events.IRevisionsRemoved"
      handler="lp.codehosting.scanner.email.send_removed_revision_emails"/>
  <subscriber
      for="lp.codehosting.scanner.events.INewRevision"
      handler="lp.codehosting.scanner.buglinks.got_new_revision"/>
  <subscriber
      for="lp.codehosting.scanner.events.IScanCompleted"
      handler="lp.codehosting.scanner.mergedetection.auto_merge_proposals"/>
  <subscriber
      for="lp.codehosting.scanner.events.IScanCompleted"
      handler="lp.codehosting.scanner.mergedetection.auto_merge_branches"/>

  <!-- BranchSet -->

  <class class="lp.code.model.branch.BranchSet">
    <allow interface="lp.code.interfaces.branch.IBranchSet"/>
  </class>
  <securedutility
      class="lp.code.model.branch.BranchSet"
      provides="lp.code.interfaces.branch.IBranchSet">
    <allow interface="lp.code.interfaces.branch.IBranchSet"/>
  </securedutility>

  <!-- BranchListingQueryOptimiser -->

  <class class="lp.code.model.branchlistingqueryoptimiser.BranchListingQueryOptimiser">
    <allow interface="lp.code.interfaces.branch.IBranchListingQueryOptimiser"/>
  </class>
  <securedutility
      class="lp.code.model.branchlistingqueryoptimiser.BranchListingQueryOptimiser"
      provides="lp.code.interfaces.branch.IBranchListingQueryOptimiser">
    <allow interface="lp.code.interfaces.branch.IBranchListingQueryOptimiser"/>
  </securedutility>

  <!-- BranchVisibilityPolicy -->

  <class class="lp.code.model.branchvisibilitypolicy.BranchVisibilityTeamPolicy">
    <allow interface="lp.code.interfaces.branchvisibilitypolicy.IBranchVisibilityTeamPolicy"/>
  </class>

  <!-- BranchDelta -->

  <class class="lp.code.adapters.branch.BranchDelta">
    <allow interface="lp.code.interfaces.branch.IBranchDelta"/>
  </class>
  <securedutility
      class="lp.code.model.branchcloud.BranchCloud"
      provides="lp.code.interfaces.branch.IBranchCloud">
    <allow interface="lp.code.interfaces.branch.IBranchCloud"/>
  </securedutility>

  <subscriber
      for="lp.code.interfaces.branch.IBranch
           lazr.lifecycle.interfaces.IObjectModifiedEvent"
      handler="lp.code.model.branch.branch_modified_subscriber"/>
  <class class="lp.code.mail.branch.RecipientReason">
    <allow attributes="
                    getReason
                    branch
                    mail_header
                    recipient
                    max_diff_lines
                    review_level"/>
  </class>
  <class class="lp.code.model.branchnamespace.PackageNamespace">
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespace"/>
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespacePolicy"/>
  </class>
  <class class="lp.code.model.branchnamespace.PersonalNamespace">
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespace"/>
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespacePolicy"/>
  </class>
  <class class="lp.code.model.branchnamespace.ProductNamespace">
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespace"/>
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespacePolicy"/>
  </class>
  <securedutility
      class="lp.code.model.branchnamespace.BranchNamespaceSet"
      provides="lp.code.interfaces.branchnamespace.IBranchNamespaceSet">
    <allow interface="lp.code.interfaces.branchnamespace.IBranchNamespaceSet"/>
  </securedutility>
  <class class="lp.code.model.branchtarget.PackageBranchTarget">
    <allow interface="lp.code.interfaces.branchtarget.IBranchTarget"/>
  </class>
  <adapter
      for="lp.registry.interfaces.sourcepackage.ISourcePackage"
      provides="lp.code.interfaces.branchtarget.IBranchTarget"
      factory="lp.code.model.branchtarget.PackageBranchTarget"/>
  <adapter
      for="lp.registry.interfaces.distributionsourcepackage.IDistributionSourcePackage"
      provides="lp.code.interfaces.branchtarget.IBranchTarget"
      factory="lp.code.model.branchtarget.distribution_sourcepackage_to_branch_target"/>

  <class class="lp.code.model.branchtarget.PersonBranchTarget">
    <allow interface="lp.code.interfaces.branchtarget.IBranchTarget"/>
  </class>
  <adapter
      for="lp.registry.interfaces.person.IPerson"
      provides="lp.code.interfaces.branchtarget.IBranchTarget"
      factory="lp.code.model.branchtarget.PersonBranchTarget"/>

  <class class="lp.code.model.branchtarget.ProductBranchTarget">
    <allow interface="lp.code.interfaces.branchtarget.IBranchTarget"/>
  </class>
  <adapter
      for="lp.registry.interfaces.product.IProduct"
      provides="lp.code.interfaces.branchtarget.IBranchTarget"
      factory="lp.code.model.branchtarget.ProductBranchTarget"/>
  <adapter
      for="lp.registry.interfaces.productseries.IProductSeries"
      provides="lp.code.interfaces.branchtarget.IBranchTarget"
      factory="lp.code.model.branchtarget.product_series_to_branch_target"/>
  <adapter
      for="lp.code.interfaces.branchtarget.IBranchTarget"
      provides="canonical.launchpad.webapp.interfaces.ICanonicalUrlData"
      factory="lp.code.model.branchtarget.get_canonical_url_data_for_target"/>
  <class class="lp.code.model.branchrevision.BranchRevision">
    <allow interface="lp.code.interfaces.branchrevision.IBranchRevision"/>
  </class>

  <!-- CodeReviewComment -->

  <class class="lp.code.model.codereviewcomment.CodeReviewComment">
    <allow interface="lp.code.interfaces.codereviewcomment.ICodeReviewComment"/>
    <allow interface="lp.code.interfaces.branchtarget.IHasBranchTarget"/>
  </class>
  <subscriber
      for="lp.code.interfaces.codereviewcomment.ICodeReviewComment
           lp.code.interfaces.event.INewCodeReviewCommentEvent"
      handler="lp.code.mail.codereviewcomment.send"/>
  <subscriber
      for="lp.code.interfaces.codereviewcomment.ICodeReviewComment
           lp.code.interfaces.event.INewCodeReviewCommentEvent"
      handler="lp.code.subscribers.karma.code_review_comment_added"/>
  <adapter
      for="lp.code.interfaces.codereviewcomment.ICodeReviewComment"
      provides="canonical.launchpad.webapp.interfaces.IPrimaryContext"
      factory="lp.code.browser.codereviewcomment.CodeReviewCommentPrimaryContext"/>

  <!-- hierarchy -->

  <class class="lp.code.model.branchjob.BranchJob">
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <class class="lp.code.model.branchjob.RevisionMailJob">
    <allow interface="lp.code.interfaces.branchjob.IRevisionMailJob"/>
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <class class="lp.code.model.branchjob.RevisionsAddedJob">
    <allow interface="lp.code.interfaces.branchjob.IRevisionsAddedJob"/>
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <class class="lp.code.model.branchjob.RosettaUploadJob">
    <allow interface="lp.code.interfaces.branchjob.IRosettaUploadJob"/>
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <class class="lp.code.model.branchjob.ReclaimBranchSpaceJob">
    <allow interface="lp.code.interfaces.branchjob.IReclaimBranchSpaceJob"/>
    <allow interface="lp.code.interfaces.branchjob.IBranchJob"/>
  </class>
  <securedutility
      component="lp.code.model.branchjob.RevisionMailJob"
      provides="lp.code.interfaces.branchjob.IRevisionMailJobSource">
    <allow interface="lp.code.interfaces.branchjob.IRevisionMailJobSource"/>
  </securedutility>
  <securedutility
      component="lp.code.model.branchjob.RevisionsAddedJob"
      provides="lp.code.interfaces.branchjob.IRevisionsAddedJobSource">
    <allow interface="lp.code.interfaces.branchjob.IRevisionsAddedJobSource"/>
  </securedutility>
  <securedutility
      component="lp.code.model.branchjob.RosettaUploadJob"
      provides="lp.code.interfaces.branchjob.IRosettaUploadJobSource">
    <allow interface="lp.code.interfaces.branchjob.IRosettaUploadJobSource"/>
  </securedutility>
  <securedutility
      component="lp.code.model.branchjob.ReclaimBranchSpaceJob"
      provides="lp.code.interfaces.branchjob.IReclaimBranchSpaceJobSource">
    <allow interface="lp.code.interfaces.branchjob.IReclaimBranchSpaceJobSource"/>
  </securedutility>

  <!-- CodeImport -->

  <class class="lp.code.model.codeimport.CodeImport">
    <implements interface="lp.code.interfaces.codeimport.ICodeImport"/>
    <allow attributes="id
                       date_created
                       branch
                       registrant
                       owner
                       assignee
                       product
                       series
                       review_status
                       rcs_type
                       cvs_root
                       cvs_module
                       url
                       date_last_successful
                       source_product_series
                       update_interval
                       effective_update_interval
                       import_job
                       results
                       consecutive_failure_count
                       getImportDetailsForDisplay"/>
    <require
       permission="launchpad.AnyPerson"
       attributes="tryFailingImportAgain
                   requestImport"/>
    <require
       permission="launchpad.Edit"
       attributes="updateFromData"/>

    <!-- ICodeImport has no set_schema, because all modifications should be
         done through methods that create CodeImportEvent objects when
         appropriate. -->

  </class>
  <adapter
      provides="canonical.launchpad.webapp.interfaces.IBreadcrumb"
      for="lp.code.interfaces.codeimport.ICodeImportSet"
      factory="lp.code.browser.codeimport.CodeImportSetBreadcrumb"
      permission="zope.Public"/>
  <subscriber
      for="lp.code.interfaces.codeimport.ICodeImport
           lazr.lifecycle.interfaces.IObjectCreatedEvent"
      handler="lp.code.mail.codeimport.new_import"/>

  <!-- CodeImportSet -->

  <securedutility
      class="lp.code.model.codeimport.CodeImportSet"
      provides="lp.code.interfaces.codeimport.ICodeImportSet">
    <allow interface="lp.code.interfaces.codeimport.ICodeImportSet"/>
  </securedutility>

  <!-- CodeImportJob -->

  <class class="lp.code.model.codeimportjob.CodeImportJob">
    <allow interface="lp.code.interfaces.codeimportjob.ICodeImportJob"/>
  </class>

  <!-- CodeImportJobSet -->

  <securedutility
      class="lp.code.model.codeimportjob.CodeImportJobSet"
      provides="lp.code.interfaces.codeimportjob.ICodeImportJobSet">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.codeimportjob.ICodeImportJobSet"/>
    <allow interface="lp.code.interfaces.codeimportjob.ICodeImportJobSetPublic"/>
  </securedutility>

  <!-- CodeImportJobWorkflow -->

  <securedutility
      class="lp.code.model.codeimportjob.CodeImportJobWorkflow"
      provides="lp.code.interfaces.codeimportjob.ICodeImportJobWorkflow">
    <require
        permission="launchpad.Edit"
        attributes="
                    newJob
                    deletePendingJob
                    updateHeartbeat
                    finishJob"/>
    <require
        permission="launchpad.AnyPerson"
        attributes="
                    requestJob"/>

    <!-- XXX MichaelHudson 2008-02-28
         bug=196345: startJob is called
         by the getJobForMachine XML-RPC method, calls to which are
         unauthenticated.    When the above bug is fixed, we can
         restrict the permissions for this attribute. -->

    <allow attributes="
                    startJob
                    reclaimJob"/>
  </securedutility>

  <!-- CodeImportEvent -->

  <class class="lp.code.model.codeimportevent.CodeImportEvent">
    <allow interface="lp.code.interfaces.codeimportevent.ICodeImportEvent"/>
  </class>

  <!-- CodeImportEventSet -->

  <securedutility
      class="lp.code.model.codeimportevent.CodeImportEventSet"
      provides="lp.code.interfaces.codeimportevent.ICodeImportEventSet">
    <allow interface="lp.code.interfaces.codeimportevent.ICodeImportEventSet"/>
  </securedutility>

  <!-- CodeImportEventToken -->

  <class class="lp.code.model.codeimportevent.CodeImportEventToken">
    <allow interface="lp.code.interfaces.codeimportevent.ICodeImportEventToken"/>
  </class>

  <class class="lp.code.model.revision.Revision">
    <allow interface="lp.code.interfaces.revision.IRevision"/>
  </class>

  <class class="lp.code.model.revision.RevisionAuthor">
    <allow interface="lp.code.interfaces.revision.IRevisionAuthor"/>
  </class>

  <class class="lp.code.model.revision.RevisionParent">
    <allow interface="lp.code.interfaces.revision.IRevisionParent" />
  </class>

  <class class="lp.code.model.revision.RevisionProperty">
    <allow interface="lp.code.interfaces.revision.IRevisionProperty" />
  </class>

  <!-- RevisionSet -->
  <class class="lp.code.model.revision.RevisionSet">
    <allow interface="lp.code.interfaces.revision.IRevisionSet" />
  </class>

  <securedutility
      class="lp.code.model.revision.RevisionSet"
      provides="lp.code.interfaces.revision.IRevisionSet" >
    <allow interface="lp.code.interfaces.revision.IRevisionSet" />
  </securedutility>


  <securedutility
      component="lp.code.model.branchjob.BranchUpgradeJob"
      provides="lp.code.interfaces.branchjob.IBranchUpgradeJobSource">
    <allow interface="lp.code.interfaces.branchjob.IBranchUpgradeJobSource"/>
  </securedutility>
  <class class="lp.code.model.branchjob.BranchUpgradeJob">
    <allow interface="lp.services.job.interfaces.job.IRunnableJob" />
  </class>

  <securedutility
      component="lp.code.model.branchjob.BranchScanJob"
      provides="lp.code.interfaces.branchjob.IBranchScanJobSource">
    <allow interface="lp.code.interfaces.branchjob.IBranchScanJobSource"/>
  </securedutility>
  <class class="lp.code.model.branchjob.BranchScanJob">
    <allow interface="lp.services.job.interfaces.job.IRunnableJob" />
    <allow interface="lp.code.interfaces.branchjob.IBranchJob" />
  </class>

  <!-- Linked branches -->
  <adapter factory="lp.code.model.linkedbranch.ProductSeriesLinkedBranch" />
  <adapter factory="lp.code.model.linkedbranch.ProductLinkedBranch" />
  <adapter factory="lp.code.model.linkedbranch.PackageLinkedBranch" />
  <adapter factory="lp.code.model.linkedbranch.DistributionPackageLinkedBranch" />

  <lp:help-folder folder="help" name="+help-code" />

  <!-- Diffs -->
  <class class="lp.code.model.diff.Diff">
    <allow interface="lp.code.interfaces.diff.IDiff" />
  </class>
  <class class="lp.code.model.diff.IncrementalDiff">
    <allow interface="lp.code.interfaces.diff.IDiff" />
    <allow interface="lp.code.interfaces.diff.IIncrementalDiff" />
  </class>
  <class class="lp.code.model.diff.PreviewDiff">
    <require
        permission="launchpad.View"
        interface="lp.code.interfaces.diff.IPreviewDiff"/>
  </class>

  <!-- SourcePackageRecipe -->

  <securedutility
     component="lp.code.model.sourcepackagerecipe.SourcePackageRecipe"
     provides="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeSource">
    <allow interface="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeSource"/>

  </securedutility>

  <class
     class="lp.code.model.sourcepackagerecipebuild.SourcePackageRecipeBuild">
    <require permission="launchpad.View" interface="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuild"/>
    <!-- This is needed for UploadProcessor to run. The permission isn't
         important; launchpad.Edit isn't actually held by anybody. -->
    <require permission="launchpad.Edit" set_attributes="status upload_log date_finished requester" />
  </class>

  <securedutility
     component="lp.code.model.sourcepackagerecipebuild.SourcePackageRecipeBuild"
     provides="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuildSource">
    <allow interface="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuildSource"/>
  </securedutility>

  <securedutility
     component="lp.code.model.sourcepackagerecipebuild.SourcePackageRecipeBuild"
     provides="lp.buildmaster.interfaces.buildfarmjob.ISpecificBuildFarmJobSource"
     name="RECIPEBRANCHBUILD">
    <allow interface="lp.buildmaster.interfaces.buildfarmjob.ISpecificBuildFarmJobSource"/>
  </securedutility>

  <class
     class="lp.code.model.sourcepackagerecipebuild.SourcePackageRecipeBuildJob">
    <require permission="launchpad.View" interface="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuildJob"/>
  </class>

  <securedutility
     component="lp.code.model.sourcepackagerecipebuild.SourcePackageRecipeBuildJob"
     provides="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuildJobSource">
    <allow interface="lp.code.interfaces.sourcepackagerecipebuild.ISourcePackageRecipeBuildJobSource"/>
  </securedutility>

  <adapter factory="lp.code.model.recipebuilder.RecipeBuildBehavior"
           permission="zope.Public" />

  <!-- SourcePackageRecipeData -->
  <class
     class="lp.code.model.sourcepackagerecipedata.SourcePackageRecipeData">
    <require permission="launchpad.View"
    interface="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeData"/>
  </class>
  <!-- SourcePackageRecipe -->
  <class
     class="lp.code.model.sourcepackagerecipe.SourcePackageRecipe">
    <require permission="launchpad.View"
      interface="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeView
                 lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeEditableAttributes
                 lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeData"
      />
    <require
       permission="launchpad.Edit"
       interface="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeEdit"
       set_schema="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipeEditableAttributes"
       set_attributes="builder_recipe date_last_modified"
        />
  </class>
  <class
     class="bzrlib.plugins.builder.recipe.BaseRecipeBranch">
    <allow attributes="name url revspec revid child_branches deb_version __str__" />
  </class>
  <class
     class="bzrlib.plugins.builder.recipe.RecipeBranch">
    <allow attributes="name url revspec revid child_branches __str__" />
  </class>
  <class
     class="bzrlib.plugins.builder.recipe.MergeInstruction">
    <allow attributes="as_tuple recipe_branch nest_path" />
  </class>
  <class
     class="bzrlib.plugins.builder.recipe.NestInstruction">
    <allow attributes="as_tuple recipe_branch nest_path" />
  </class>

  <subscriber
    for="lp.code.interfaces.sourcepackagerecipe.ISourcePackageRecipe zope.lifecycleevent.interfaces.IObjectModifiedEvent"
    handler="lp.code.model.sourcepackagerecipe.recipe_modified"/>

  <utility component="lp.code.model.sourcepackagerecipebuild.SourcePackageRecipeBuildJob"
        name="RECIPEBRANCHBUILD"
        provides="lp.buildmaster.interfaces.buildfarmjob.IBuildFarmJob"/>

  <webservice:register module="lp.code.interfaces.webservice" />

  <adapter
    factory="lp.code.browser.sourcepackagerecipe.distroseries_renderer"
    name="distroseries"/>

  <!-- RecipeBuildRecordSet and related classes-->

  <securedutility
      class="lp.code.model.recipebuild.RecipeBuildRecordSet"
      provides="lp.code.interfaces.recipebuild.IRecipeBuildRecordSet">
    <allow interface="lp.code.interfaces.recipebuild.IRecipeBuildRecordSet"/>
  </securedutility>

  <class class="lp.code.model.recipebuild.RecipeBuildRecord">
    <allow attributes="sourcepackagename recipeowner recipe archive
                        most_recent_build_time distro_source_package
                        recipe_name recipe_url"/>
  </class>

  <class class="lp.code.model.recipebuild.RecipeBuildRecordResultSet">
    <allow interface="storm.zope.interfaces.IResultSet" />
    <allow attributes="__getslice__" />
  </class>

</configure>
