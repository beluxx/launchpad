Code imports
============

The code imports overview page is linked of the main code page.

    >>> browser.open('http://code.launchpad.dev')
    >>> browser.getLink('1 imported branches').click()
    >>> print browser.title
    Code Imports

Any user can look at the current list of imports.

    >>> anon_browser.open('http://code.launchpad.dev/+code-imports')
    >>> print anon_browser.title
    Code Imports

There are two CodeImports in the sample data and they both show up in
the page:

    >>> table = find_tag_by_id(browser.contents, 'code-import-listing')
    >>> names = [extract_text(tr.td) for tr in table.tbody('tr')]
    >>> for name in names:
    ...     print name
    gnome-terminal/import
    evolution/import

If we click on the code import's name, we go to the associated branch
for that import:

    >>> browser.getLink('gnome-terminal/import').click()
    >>> browser.url
    'http://code.launchpad.dev/~vcs-imports/gnome-terminal/import'


Filtering the code import list
==============================

The code import listing is filterable, on review status and type.
There are no invalid imports in the sample data, so if we filter just
on them we'll see the "no imports found" message.  It is worth
ensuring that the control for filtering on review status reads "Any"
by default, as the code that ensures this is poking at Zope 3
internals a bit.

    >>> browser.open('http://code.launchpad.dev/+code-imports')
    >>> control = browser.getControl(name="field.review_status")
    >>> control.displayValue
    ['Any']
    >>> control.displayValue = ["Invalid"]
    >>> browser.getControl(name="submit").click()
    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'no-imports'))
    No matching code imports found.

Of course selecting the "Any" filtering option ensures that all
imports appear again.

    >>> browser.getControl(name="field.review_status").displayValue = ["Any"]
    >>> browser.getControl(name="submit").click()
    >>> table = find_tag_by_id(browser.contents, 'code-import-listing')
    >>> rows = [extract_text(tr) for tr in table('tr')]
    >>> for row in rows:
    ...     print row
    Import                Created  Type               Location     Status
    gnome-terminal/import 2007-... Subversion via ... http://sv... Reviewed
    evolution/import      2007-... Concurrent Vers... :pserver:... Pending Review

We can also filter by type.

    >>> control = browser.getControl(name="field.rcs_type")
    >>> control.displayValue
    ['Any']
    >>> browser.getControl(name="field.rcs_type").displayValue = [
    ...    "Concurrent Versions System"]
    >>> browser.getControl(name="submit").click()
    >>> table = find_tag_by_id(browser.contents, 'code-import-listing')
    >>> rows = [extract_text(tr) for tr in table('tr')]
    >>> for row in rows:
    ...     print row
    Import           Created  Type               Location     Status
    evolution/import 2007-... Concurrent Vers... :pserver:... Pending Review

If we create a lot of imports, the listing view will be batched.

    >>> from lp.testing import login, logout
    >>> login('test@canonical.com')
    >>> for i in range(10):
    ...     new_import = factory.makeCodeImport()

    >>> logout()

    >>> browser.open('http://code.launchpad.dev/+code-imports')
    >>> browser.getLink('Next').click()
    >>> browser.url
    'http://code.launchpad.dev/+code-imports/+index?...start=5...'
