Submissions to the hardware database
====================================

The hardware database client collects information from various sources,
and submits it in an HTTP POST request to the hardware database server.
The POST data consists of the following fields:

  * date_created (see hwdb.txt)
  * format (see hwdb.txt)
  * private (see hwdb.txt)
  * contactable (see hwdb.txt)
  * submission_key (see hwdb.txt)
  * emailaddress (see hwdb.txt)
  * distribution: The distribution name. The value should match a value
    in the SQL table Distribution, column name.
  * distroseries: The distroseries version. The value should match a value
    in the SQL table distroseries, column version
  * processorfamily: The name of the processorfamily. The value should
    match a value in the SQL table Processorfamily, column name.
  * system: The system name as returned by HAL (system.vendor, system.product)
  * submission_data: An XML file containing the collected data. This file is
    simply stored as a Librarian file, and parsed later by a cron job.

    >>> import io
    >>> from zope.component import getUtility
    >>> from lp.hardwaredb.interfaces.hwdb import IHWDBApplication
    >>> data = io.BytesIO(b'some data.')
    >>> data.filename = 'hardware-info'
    >>> form={'field.date_created':    u'2007-08-01',
    ...       'field.format':          u'VERSION_1',
    ...       'field.private':         u'',
    ...       'field.contactable':     u'',
    ...       'field.submission_key':  u'unique-id-1',
    ...       'field.emailaddress':    u'test@canonical.com',
    ...       'field.distribution':    u'ubuntu',
    ...       'field.distroseries':    u'5.04',
    ...       'field.architecture':    u'i386',
    ...       'field.system':          u'HP 6543',
    ...       'field.submission_data': data,
    ...       'field.actions.upload':  u'Upload'}

    >>> app = getUtility(IHWDBApplication)
    >>> submit_view = create_initialized_view(app, name='+submit', form=form)
    >>> submit_view.errors
    []

The request created an entry in the HWDBSubmissions table.

    >>> from lp.hardwaredb.interfaces.hwdb import IHWSubmissionSet
    >>> submission_set = getUtility(IHWSubmissionSet)
    >>> submission = submission_set.getBySubmissionKey(u'unique-id-1')
    >>> submission.date_created, submission.format.name
    (datetime.datetime(2007, 8, 1, 0, 0, tzinfo=<UTC>), 'VERSION_1')
    >>> submission.private, submission.contactable
    (False, False)
    >>> submission.submission_key
    u'unique-id-1'
    >>> submission.system_fingerprint.fingerprint
    u'HP 6543'

The submitted data is stored in raw_submission.

    >>> import transaction
    >>> transaction.commit()
    >>> submission.raw_submission.read()
    'some data.'

A reference to distroarchseries is created for the fields distribution,
distroseries, architecture.

    >>> submission.distroarchseries.distroseries.distribution.name
    u'ubuntu'
    >>> submission.distroarchseries.distroseries.version
    u'5.04'
    >>> submission.distroarchseries.architecturetag
    u'i386'

Each submission must have a distinct submission_key, hence an attempt to submit
identical data a second time leads to an error.

    >>> submit_view = create_initialized_view(app, name='+submit', form=form)
    >>> for error in submit_view.errors:
    ...     print(error.doc())
    Submission key already exists.

If the field distribution contains a name which is not known in the
Launchpad database, the distroarchseries field is None.

    >>> form['field.submission_key'] = u'unique-id-2'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.distribution'] = 'no distribution'
    >>> submit_view = create_initialized_view(
    ...     app, name='+submit', form=invalid_form)
    >>> submission = submission_set.getBySubmissionKey(u'unique-id-2')
    >>> print(submission.distroarchseries)
    None

If distribution is known, but distroseries or architecture are unknown
to Launchpad, we refuse the submissions.

    >>> form['field.submission_key'] = u'unique-id-3'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.distroseries'] = 'no release'
    >>> submit_view = create_initialized_view(
    ...     app, name='+submit', form=invalid_form)
    >>> print(submission_set.getBySubmissionKey(u'unique-id-3'))
    None

    >>> form['field.submission_key'] = u'unique-id-4'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.architecture'] = 'no architecture'
    >>> submit_view = create_initialized_view(
    ...     app, name='+submit', form=invalid_form)
    >>> print(submission_set.getBySubmissionKey(u'unique-id-4'))
    None

The `date_created` field must contain a valid date.

    >>> form['field.submission_key'] = u'unique-id-5'
    >>> invalid_form = form.copy()
    >>> invalid_form['field.date_created'] = '2007-05-35'
    >>> submit_view = create_initialized_view(
    ...     app, name='+submit', form=invalid_form)
    >>> for error in submit_view.errors:
    ...     print(error.doc())
    Invalid datetime data

The `format` field must contain a value that matches the DBEnumeratedType
HWDBSubmissionFormat.

    >>> invalid_form = form.copy()
    >>> invalid_form['field.format'] = u'VERSION_42'
    >>> submit_view = create_initialized_view(
    ...     app, name='+submit', form=invalid_form)
    >>> for error in submit_view.errors:
    ...     print(error.doc())
    Invalid value

The field `submission_key` may contain only ASCII data.

    >>> invalid_form = form.copy()
    >>> invalid_form['field.submission_key'] = u'wrong id \x81'
    >>> submit_view = create_initialized_view(
    ...     app, name='+submit', form=invalid_form)
    >>> for error in submit_view.errors:
    ...     print(error.doc())
    Invalid textual data

The field `emailaddress` must contain a formally valid email address.

    >>> invalid_form = form.copy()
    >>> invalid_form['field.emailaddress'] = u'beeblebrox'
    >>> submit_view = create_initialized_view(
    ...     app, name='+submit', form=invalid_form)
    >>> for error in submit_view.errors:
    ...     print(error.doc())
    Invalid email address

All fields are required.  With normal form processing, it's impossible not to
have values for field.format, field.private, or field.contactable because
those widgets are checkboxes and menus.

    >>> for field in (
    ...     'field.date_created', 'field.submission_key',
    ...     'field.emailaddress', 'field.distribution',
    ...     'field.distroseries', 'field.architecture',
    ...     'field.system', 'field.submission_data',
    ...     ):
    ...     invalid_form = form.copy()
    ...     del invalid_form[field]
    ...     invalid_form[field] = u''
    ...     submit_view = create_initialized_view(
    ...         app, name='+submit', form=invalid_form)
    ...     print(field)
    ...     for error in submit_view.errors:
    ...         field_name = error.field_name
    ...         print('   ', field_name,
    ...               submit_view.getFieldError(field_name))
    field.date_created
        date_created Required input is missing.
    field.submission_key
        submission_key Required input is missing.
    field.emailaddress
        emailaddress Required input is missing.
    field.distribution
        distribution Required input is missing.
    field.distroseries
        distroseries Required input is missing.
    field.architecture
        architecture Required input is missing.
    field.system
        system Required input is missing.
    field.submission_data
        submission_data Required input is missing.

Teams can be owners of submissions.

    >>> import os
    >>> from lp.services.config import config
    >>> team_form = form.copy()
    >>> team_form['field.emailaddress'] = 'support@ubuntu.com'
    >>> team_form['field.submission_key'] = u'unique-id-68'
    >>> valid_sample_data_path = os.path.join(
    ...     config.root,
    ...     'lib/lp/hardwaredb/scripts/tests/'
    ...     'simple_valid_hwdb_submission.xml')
    >>> valid_sample_data = io.BytesIO(
    ...     open(valid_sample_data_path, 'rb').read())
    >>> valid_sample_data.filename = 'simple_valid_hwdb_submission.xml'
    >>> team_form['field.submission_data'] = valid_sample_data
    >>> submit_view = create_initialized_view(
    ...     app, name='+submit', form=team_form)
    >>> submission = submission_set.getBySubmissionKey(u'unique-id-68')
    >>> submission.owner.displayname
    u'Ubuntu Team'
