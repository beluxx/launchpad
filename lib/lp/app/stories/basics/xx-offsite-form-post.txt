Referrer Checking on Form Posts
===============================

To help mitigate cross site request forgery attacks, we check that the
referrer for a form post exists and is a URI from one of the Launchpad sites.

First a helper to set up a browser object that doesn't handle the
"Referer" header automatically.  We need to poke into the internal
mechanize browser object here because Zope's test browser does not
expose the required functionality:

  >>> def setupBrowserWithReferrer(referrer):
  ...      browser = setupBrowser("Basic no-priv@canonical.com:test")
  ...      browser.mech_browser.set_handle_referer(False)
  ...      if referrer is not None:
  ...          browser.addHeader("Referer", referrer)
  ...      return browser


If we try to create a new team with with the referrer set to
"evil.people.com", the post fails:

  >>> browser = setupBrowserWithReferrer('http://evil.people.com/')
  >>> browser.open('http://launchpad.dev/people/+newteam')
  >>> browser.getControl('Name', index=0).value = 'team1'
  >>> browser.getControl('Display Name').value = 'Team 1'
  >>> browser.getControl('Create').click()
  Traceback (most recent call last):
    ...
  OffsiteFormPostError: http://evil.people.com/


Similarly, posting with a garbage referer fails:

  >>> browser = setupBrowserWithReferrer('not a url')
  >>> browser.open('http://launchpad.dev/people/+newteam')
  >>> browser.getControl('Name', index=0).value = 'team2'
  >>> browser.getControl('Display Name').value = 'Team 2'
  >>> browser.getControl('Create').click()
  Traceback (most recent call last):
    ...
  OffsiteFormPostError: not a url


It also fails if there is no referrer.

Note that we have to set up a monkeypatch to test this in order to work
around Zope bug 98437 (https://bugs.launchpad.net/zope3/+bug/98437).

  >>> from lp.services.webapp.servers import LaunchpadBrowserRequest
  >>> original_init = LaunchpadBrowserRequest.__init__
  >>> def __init__(self, body_instream, environ, response=None):
  ...     if environ.get('HTTP_REFERER') == 'localhost':
  ...         # When this line is not printed, the monkeypatch can be removed!
  ...         print 'MONKEYPATCH ACTIVATED'
  ...         del environ['HTTP_REFERER']
  ...     original_init(self, body_instream, environ, response=None)
  ...
  >>> LaunchpadBrowserRequest.__init__ = __init__

  >>> browser = setupBrowserWithReferrer(None)
  >>> browser.open('http://launchpad.dev/people/+newteam')
  MONKEYPATCH ACTIVATED
  >>> browser.getControl('Name', index=0).value = 'team3'
  >>> browser.getControl('Display Name').value = 'Team 3'
  >>> browser.getControl('Create').click()
  Traceback (most recent call last):
    ...
  NoReferrerError: No value for REFERER header

When a POST request is rejected because the REFERER header is missing, it
may be because the user is trying to enforce anonymity.  Therefore, we
present a hopefully helpful error message.

  >>> browser.handleErrors = True
  >>> browser.open('http://launchpad.dev/people/+newteam')
  MONKEYPATCH ACTIVATED
  >>> browser.getControl('Name', index=0).value = 'team3'
  >>> browser.getControl('Display Name').value = 'Team 3'
  >>> browser.getControl('Create').click()
  Traceback (most recent call last):
    ...
  HTTPError...
  >>> print browser.headers['status']
  403 Forbidden
  >>> print extract_text(find_main_content(browser.contents))
  No REFERER Header
  ...
  >>> browser.getLink('the FAQ').url
  'https://answers.launchpad.net/launchpad/+faq/1024'
  >>> browser.handleErrors = False

We have a few exceptional cases in which we allow POST requests without a
REFERER header.

To support apport, we allow it for +storeblob.

  >>> browser.post('http://launchpad.dev/+storeblob', 'x=1')
  MONKEYPATCH ACTIVATED

Similary, we exempt the URL /+hwdb/+submit in order to allow checkbox
to submit HWDB reports.

  >>> browser.post('http://launchpad.dev/+hwdb/+submit', 'x=1')
  MONKEYPATCH ACTIVATED

To support old versions of launchpadlib, we also let POST requests
without a REFERER header go through to +request-token and
+access-token.

  >>> body = ('oauth_signature=%26&oauth_consumer_key=test'
  ...         '&oauth_signature_method=PLAINTEXT')
  >>> browser.post('http://launchpad.dev/+request-token', body)
  MONKEYPATCH ACTIVATED

This request results in a response code of 401, but if there was no
exception for +access-token, it would result in an
OffsiteFormPostError.

  >>> browser.post('http://launchpad.dev/+access-token', 'x=1')
  Traceback (most recent call last):
  ...
  HTTPError: HTTP Error 401: Unauthorized

We also let the request go through if the referrer is from a site
managed by launchpad:

  # Go behind the curtains and change the hostname of one of our sites so that
  # we can test this.
  >>> from lp.services.webapp.vhosts import allvhosts
  >>> allvhosts._hostnames.add('bzr.dev')

  >>> browser = setupBrowserWithReferrer('http://bzr.dev')
  >>> browser.open('http://launchpad.dev/people/+newteam')
  >>> browser.getControl('Name', index=0).value = 'team4'
  >>> browser.getControl('Display Name').value = 'Team 4'
  >>> browser.getControl('Create').click()
  >>> print browser.url
  http://launchpad.dev/~team4

  # Now restore our site's hostname.
  >>> allvhosts._hostnames.remove('bzr.dev')

Cheaters never prosper
----------------------

Older versions of Launchpad contained security flaws that allowed
specially crafted requests to bypass the referrer check. None of these
crafted requests work anymore. For instance, you can't cheat by making
a referrerless POST request to the browser-accessible API.

  >>> browser = setupBrowserWithReferrer('http://evil.people.com/')
  >>> no_referrer_browser = setupBrowserWithReferrer(None)

  >>> browser.post('http://launchpad.dev/api/devel/people', 'ws.op=foo&x=1')
  Traceback (most recent call last):
  ...
  OffsiteFormPostError: http://evil.people.com/

  >>> no_referrer_browser.post(
  ...     'http://launchpad.dev/api/devel/people', 'ws.op=foo&x=1')
  Traceback (most recent call last):
  ...
  NoReferrerError: No value for REFERER header

You can't cheat by making your referrerless POST request seem as
though it were signed with OAuth.

  >>> browser.post(
  ...     'http://launchpad.dev/', 'oauth_consumer_key=foo&oauth_token=bar')
  Traceback (most recent call last):
  ...
  OffsiteFormPostError: http://evil.people.com/

  >>> no_referrer_browser.post(
  ...     'http://launchpad.dev/', 'oauth_consumer_key=foo&oauth_token=bar')
  Traceback (most recent call last):
  ...
  NoReferrerError: No value for REFERER header

You might think you can actually sign a request with an anonymous
OAuth credential. You don't need any knowledge of the user account to
create an anonymous signature, and you don't need to use the name of
an existing consumer. Maybe the signature will make your request look
enough like an anonymous OAuth request to bypass the referrer check.

  >>> sig = ('ws.op=new_project&display_name=a&name=bproj&summary=c&title=d'
  ...        '&oauth_nonce=x&oauth_timestamp=y&oauth_consumer_key=key'
  ...        '&oauth_signature_method=PLAINTEXT&oauth_version=1.0'
  ...        '&oauth_token=&oauth_signature=%26')

But the browser-accessible API ignores OAuth credentials altogether.

  >>> browser.post(
  ...     'http://launchpad.dev/api/devel/projects', sig)
  Traceback (most recent call last):
  ...
  OffsiteFormPostError: http://evil.people.com/

If you go through the 'api' vhost, the signed request will be
processed despite the bogus referrer, but...

  >>> browser.post('http://api.launchpad.dev/devel/projects', sig)
  Traceback (most recent call last):
  ...
  NoneError: None isn't acceptable as a value for Product.owner

You're making an _anonymous_ request. That's a request that 1) is not
associated with any Launchpad user account (thus the NoneError when
trying to determine the project's owner), 2) can't modify the dataset,
and 3) can only access public data. So being able to make the request
from another site using someone's web browser doesn't buy you
anything.

Cleanup.

  >>> LaunchpadBrowserRequest.__init__ = original_init
