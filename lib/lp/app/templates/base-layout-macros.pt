<macros
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:tal="http://xml.zope.org/namespaces/tal"
  xmlns:metal="http://xml.zope.org/namespaces/metal"
  xmlns:i18n="http://xml.zope.org/namespaces/i18n"
  i18n:domain="launchpad"
  tal:omit-tag=""
>

<metal:notifications define-macro="notifications"
  tal:define="notifications notifications|request/notifications">
  <tal:comment replace="nothing">
    This macro expects the following variables:
    :notifications: An object implementing INotificationList.
  </tal:comment>

  <div class="error message"
    tal:repeat="notification notifications/error"
    tal:content="structure notification/message"
  >An error notification message</div>
  <div class="warning message"
    tal:repeat="notification notifications/warning"
    tal:content="structure notification/message"
  >A warning notification message</div>
  <div class="informational message"
    tal:repeat="notification notifications/info"
    tal:content="structure notification/message"
  >An info notification message</div>
  <div class="debug message"
    tal:repeat="notification notifications/debug"
    tal:content="structure notification/message"
  >A debug notification message, only displayed for developers.</div>
</metal:notifications>


<metal:load-javascript define-macro="load-javascript"
  tal:define="
      revno modules/lp.app.versioninfo/revno | string:unknown;
      icingroot string:/+icing/rev${revno};
      devmode modules/lp.services.config/config/devmode;
      yui_version view/yui_version;
      yui_console_debug view/yui_console_debug;"
  >
  <tal:comment replace="nothing">
    This macro just loads javascript files. It doesn't
    do any initialization.

    We load all of the script files from the same host that served the HTML in
    order to optimize IE caching over SSL. This is inefficient when you cross
    subdomains (from bugs to code for example) but luckily most users stay
    within one or two domains.

    XXX mars 2010-04-08
    We can revisit this IE-only optimization if we remove SSL.  Any changes that
    affect IE should be tested using webpagetest.org. (See the dev.launchpad.net
    wiki for details.)
  </tal:comment>
  <script type="text/javascript">
    var LP = {
        cache: {},
        links: {}
    };
  </script>
  <tal:js-legacy condition="not: request/features/js.combo_loader.enabled">
    <script type="text/javascript"
          tal:attributes="src string:${icingroot}/build/launchpad.js"></script>
    <script type="text/javascript" tal:content="string:
       YUI.GlobalConfig = {
           debug: ${yui_console_debug},
           fetchCSS: false,
           timeout: 50
        }
       ">
    </script>
  </tal:js-legacy>

  <script type="text/javascript"
      tal:content="string:var cookie_scope = '${request/lp:cookie_scope}';"></script>

  <tal:js-loader condition="request/features/js.combo_loader.enabled">
   <script
   src="/+combo/?yui/yui/yui-min.js&lp/meta.js&yui/loader/loader-min.js"></script>
   <script type="text/javascript" tal:content="string:
        YUI.GlobalConfig = {
            combine: true,
            comboBase: '/+combo/?',
            root: 'yui/',
            debug: ${yui_console_debug},
            fetchCSS: false,
            groups: {
                lp: {
                    combine: true,
                    base: '/+combo/?lp/',
                    comboBase: '/+combo/?',
                    root: 'lp/',
                    // comes from including lp/meta.js
                    modules: LP_MODULES,
                    fetchCSS: false
                },
                yui2: {
                    combine: true,
                    base: '/+combo/?yui2/',
                    comboBase: '/+combo/?',
                    root: 'yui2/',
                    fetchCSS: false,
                    modules: {
                        'yui2-yahoo': {
                            path: 'yahoo/yahoo.js'
                        },
                        'yui2-event': {
                            path: 'event/event.js'
                        },
                        'yui2-dom': {
                            path: 'dom/dom.js'
                        },
                        'yui2-calendar': {
                            path: 'calendar/calendar.js'
                        },
                        'yui2-dom-event': {
                            path: 'yahoo-dom-event/yahoo-dom-event.js'
                        }
                    }
                }
            }
        }">
   </script>
  </tal:js-loader>
</metal:load-javascript>

<metal:page-javascript define-macro="page-javascript"
  tal:define="
      revno modules/lp.app.versioninfo/revno | string:unknown;
      devmode modules/lp.services.config/config/devmode;
      map_query string:&amp;file=api&amp;v=2&amp;key=${modules/lp.services.config/config/google/maps_api_key};">
  <tal:comment replace="nothing">
    Load and initialize the common script used by all pages.
  </tal:comment>

  <metal:load-lavascript use-macro="context/@@+base-layout-macros/load-javascript" />

    <script id="base-layout-load-scripts" type="text/javascript">
        YUI().use('base', 'node', 'console', 'event',
            'oop', 'lp', 'lp.app.privacy',
            'lp.app.beta_features', 'lp.app.foldables','lp.app.sorttable',
            'lp.app.inlinehelp', 'lp.app.links', 'lp.app.longpoll',
            'lp.bugs.bugtask_index', 'lp.bugs.subscribers',
            'lp.code.branchmergeproposal.diff', 'lp.comments.hide',
            function(Y) {

            Y.on("domready", function () {
                if (Y.one(document.body).hasClass('private')) {
                    Y.lp.app.privacy.setup_privacy_notification();
                    Y.lp.app.privacy.display_privacy_notification();
                }
                Y.lp.app.beta_features.display_beta_notification();
                Y.lp.app.sorttable.SortTable.init();
                Y.lp.app.inlinehelp.init_help();
                Y.lp.activate_collapsibles();
                Y.lp.app.foldables.activate();
                Y.lp.app.links.check_valid_lp_links();
                // Longpolling will only start if
                // LP.cache.longpoll is populated.
                // We use Y.later to work around a Safari/Chrome 'feature':
                // The mouse cursor stays 'busy' until all the requests started during
                // page load are finished.  Hence we want the long poll request to start
                // right *after* the page has loaded.
                Y.later(0, Y.lp.app.longpoll, Y.lp.app.longpoll.setupLongPollManager);

            });

            Y.on('lp:context:web_link:changed', function(e) {
                  window.location = e.new_value;
            });
        });
    </script>
    <script id="base-helper-functions" type="text/javascript">
         //<![CDATA[
        // This code is pulled from lp.js that needs to be available on every
        // request. Pulling here to get it outside the scope of the YUI block.
        // Lint-safe scripting URL.
        var VOID_URL = '_:void(0);'.replace('_', 'javascript');

        function registerLaunchpadFunction(func) {
            // registers a function to fire onload.
            // Use this for initilaizing any javascript that should fire once the page
            // has been loaded.
            YUI().use('node', function(Y) {
                Y.on('load', function(e) {
                    func();
                }, window);
            });
        }

        // Enable or disable the beta.launchpad.net redirect
        function setBetaRedirect(enable) {
            var expire = new Date();
            if (enable) {
                expire.setTime(expire.getTime() + 1000);
                document.cookie = ('inhibit_beta_redirect=0; Expires=' +
                                   expire.toGMTString() + cookie_scope);
                alert('Redirection to the beta site has been enabled');
            } else {
                expire.setTime(expire.getTime() + 2 * 60 * 60 * 1000);
                document.cookie = ('inhibit_beta_redirect=1; Expires=' +
                                   expire.toGMTString() + cookie_scope);
                alert('You will not be redirected to the beta site for 2 hours');
            }
            return false;
        }

        function setFocusByName(name) {
            // Focus the first element matching the given name which can be focused.
            var nodes = document.getElementsByName(name);
            var i, node;
            for (i = 0; i < nodes.length; i++) {
                node = nodes[i];
                if (node.focus) {
                    try {
                        // Trying to focus a hidden element throws an error in IE8.
                        if (node.offsetHeight !== 0) {
                            node.focus();
                        }
                    } catch (e) {
                        YUI().use('console', function(Y) {
                            Y.log('In setFocusByName(<' +
                                node.tagName + ' type=' + node.type + '>): ' + e);
                        });
                    }
                    break;
                }
            }
        }

        function popup_window(url, name, width, height) {
            var iframe = document.getElementById('popup_iframe_' + name);
            if (!iframe.src || iframe.src === VOID_URL) {
                // The first time this handler runs the window may not have been
                // set up yet; sort that out.
                iframe.style.width = width + 'px';
                iframe.style.height = height + 'px';
                iframe.style.position = 'absolute';
                iframe.style.background = 'white';
                iframe.src = url;
            }
            iframe.style.display = 'inline';
            // I haven't found a way of making the search form focus again when
            // the popup window is redisplayed. I tried doing an
            //    iframe.contentDocument.searchform.search.focus()
            // but nothing happens.. -- kiko, 2007-03-12
        }

        function selectWidget(widget_name, event) {
          if (event && (event.keyCode === 9 || event.keyCode === 13)) {
              // Avoid firing if user is tabbing through or simply pressing
              // enter to submit the form.
              return;
          }
          document.getElementById(widget_name).checked = true;
        }

        function switchBugBranchFormAndWhiteboard(id) {
            var div = document.getElementById('bugbranch' + id);
            var wb = document.getElementById('bugbranch' + id + '-wb');

            if (div.style.display === "none") {
                /* Expanding the form */
                if (wb !== null) {
                    wb.style.display = "none";
                }
                div.style.display = "block";
                /* Use two focus calls to get the browser to scroll to the end of the
                 * form first, then focus back to the first field of the form.
                 */
                document.getElementById('field'+id+'.actions.update').focus();
                document.getElementById('field'+id+'.whiteboard').focus();
            } else {
                if (wb !== null) {
                    wb.style.display = "block";
                }
                div.style.display = "none";
            }
            return false;
        }

        function switchSpecBranchFormAndSummary(id) {
            /* The document has two identifiable elements for each
             * spec-branch link:
             *    'specbranchX' which is the div containing the edit form
             *    'specbranchX-summary' which is the div contining the sumary
             * where X is the database id of the link.
             */
            var div = document.getElementById('specbranch' + id);
            var wb = document.getElementById('specbranch' + id + '-summary');

            if (div.style.display === "none") {
                /* Expanding the form */
                if (wb !== null) {
                    wb.style.display = "none";
                }
                div.style.display = "block";
                /* Use two focus calls to get the browser to scroll to the end of the
                 * form first, then focus back to the first field of the form.
                 */
                document.getElementById('field' + id + '.actions.change').focus();
                document.getElementById('field' + id + '.summary').focus();
            } else {
                if (wb !== null) {
                    wb.style.display = "block";
                }
                div.style.display = "none";
            }
            return false;
        }

        function updateField(field, enabled)
        {
            field.disabled = !enabled;
        }
        //]]>
    </script>
</metal:page-javascript>


<metal:launchpad-stylesheet-3-0 define-macro="launchpad-stylesheet-3-0"
  tal:define="
    revno modules/lp.app.versioninfo/revno | string:unknown;
    icingroot string:/+icing/rev${revno}">
  <tal:comment replace="nothing">
    This macro loads a single css file containing all our stylesheets.
    If you need to include a new css file here, add it to
    buildout-templates/bin/combine-css.in instead.

    We load the CSS from the same host that served the HTML in order to optimize
    IE caching over SSL. This is inefficient when you cross subdomains (from
    bugs to code for example) but luckily most users stay within one or two
    domains.

    XXX mars 2010-04-08
    We can revisit this IE-only optimization if we remove SSL.  Any changes that
    affect IE should be tested using webpagetest.org. (See the dev.launchpad.net
    wiki for details.)
    </tal:comment>
  <link
        type="text/css"
        rel="stylesheet"
        media="screen, print"
        tal:attributes="href string:${icingroot}/combo.css" />
</metal:launchpad-stylesheet-3-0>


<metal:lp-client-cache define-macro="lp-client-cache">
  <tal:cache condition="view/user|nothing"
              define="cache request/webservicerequest:cache;
                      links cache/links;
                      objects cache/objects;">
    <script tal:repeat="key links"
      tal:content="string:LP.links['${key}'] =
                   '${links/?key/fmt:api_url}';">
    </script>
  </tal:cache>
  <tal:comment condition="nothing">
    The id of the script block below is used to determine whether this
    page is loaded by test_lp_client_integration.js.
  </tal:comment>
  <script id="json-cache-script"
          tal:content="string:LP.cache = ${view/getCacheJSON};">
  </script>
</metal:lp-client-cache>


<metal:application-buttons define-macro="application-buttons">
  <!-- Application Menu -->
  <ul class="facetmenu"
      tal:define="facetmenu view/menu:facet">
    <tal:facet repeat="link facetmenu">
      <li
        tal:condition="python: link.enabled and link.selected"
        tal:attributes="title link/summary; class string:${link/name} active"
        ><span
          tal:condition="not:link/linked"
          tal:content="structure link/escapedtext"
          /><a
          tal:condition="link/linked"
          tal:attributes="href link/url"
          tal:content="structure link/escapedtext" /></li>
      <li
        tal:condition="python: link.enabled and not link.selected"
        tal:attributes="title link/summary; class link/name"
        ><a
          tal:condition="link/enabled"
          tal:attributes="href link/url"
          tal:content="structure link/escapedtext"
          /></li>
      <li
        tal:condition="not:link/enabled"
        tal:attributes="class string:${link/name} disabled-tab"
        ><span
           tal:content="link/escapedtext" /></li>
    </tal:facet>
  </ul>
</metal:application-buttons>


<metal:footer define-macro="footer">
  <div id="footer" class="footer">
    <div class="lp-arcana" tal:condition="not:view/is_root_page|nothing">
        <div class="lp-branding">
          <a tal:attributes="href string:${rooturl}"><img src="/@@/launchpad-logo-and-name-hierarchy.png" alt="Launchpad"/></a>
          &nbsp;&bull;&nbsp;
          <a tal:attributes="href string:${rooturl}+tour">Take the tour</a>
          &nbsp;&bull;&nbsp;
          <a href="https://help.launchpad.net/">Read the guide</a>
          &nbsp;
          <form id="globalsearch" method="get" accept-charset="UTF-8"
            tal:condition="view/macro:pagehas/globalsearch"
            tal:attributes="action string:${rooturl}+search">
            <input type="search" id="search-text" name="field.text" />
            <input type="image" src="/@@/search" style="vertical-align:5%" alt="Search Launchpad"/>
          </form>
        </div>
        <metal:site-message
          use-macro="context/@@+base-layout-macros/site-message"/>
    </div>

    <div class="colophon">
      &copy; 2004-2012
      <a href="http://canonical.com/">Canonical&nbsp;Ltd.</a>
      &nbsp;&bull;&nbsp;
      <a tal:attributes="href string:${rooturl}legal">Terms of use</a>
      &nbsp;&bull;&nbsp;
      <a tal:condition="not: view/user|nothing"
        href="/feedback">Contact Launchpad Support</a>
      <a tal:condition="view/user|nothing"
        href="/support">Contact Launchpad Support</a>
      &nbsp;&bull;&nbsp;
      <a href="http://blog.launchpad.net/"
	>Blog</a>
      <tal:careers_link condition="not: features/baselayout.careers_link.disabled">
	&nbsp;&bull;&nbsp;
	<a href="http://www.canonical.com/about-canonical/careers"
		>Careers</a>
      </tal:careers_link>
      &nbsp;&bull;&nbsp;
      <a href="http://identi.ca/launchpadstatus"
        >System status</a>
      <span id="lp-version">
      &nbsp;&bull;&nbsp;
        r<tal:revno replace="revno" />
        <tal:devmode condition="devmode">devmode</tal:devmode>
        <tal:demo condition="is_demo">demo site</tal:demo>
        (<a href="https://dev.launchpad.net/"
             >Get the code!</a>)
      </span>
    </div>
  </div>
</metal:footer>

<metal:site-message define-macro="site-message">
  <div class="sitemessage" tal:condition="site_message">
    <tal:site_message tal:content="structure site_message">
      This site is running pre-release code.
    </tal:site_message>
  </div>
</metal:site-message>


<metal:debug-timeline define-macro="debug-timeline">
  <a name="debug_timeline"
    id="debug_timeline"
    class="hidden"
    >
    <table
      tal:condition="request/features/visible_render_time"
      tal:define="timeline_actions modules/lp.services.webapp.adapter/get_timeline_actions"
      class="debug-timeline listing"
      >
      <thead>
	<th>Duration</th>
	<th>Action</th>
      </thead>
      <tr tal:repeat="action timeline_actions">
	<td class="amount" tal:content="action/duration/fmt:millisecondduration"/>
	<td style="font-family: monospace; text-align: left;">
          <pre class="wrap"><span class="action-category" tal:content="action/category"/>: <span class="action-details" tal:content="action/detail"/></pre>
	</td>
      </tr>
    </table>
  </a>
</metal:debug-timeline>


<metal:plural-msg define-macro="plural-message">
  <tal:comment condition="nothing">
    Expected variables to be defined in a containing tag or global:
    count - value to check to determine plural form
    singluar - string to use when count == 1
    plural - string to use when count > 1.  If no plural is given it defaults
    to the singular value + 's'.
  </tal:comment>
  <tal:singular
    condition="python: count == 1"
    replace="singular" /><tal:plural
     define="l_default string:s;
             l_plural plural | string:$singular$l_default;"
    condition="python: count != 1"
    replace="l_plural" /></metal:plural-msg>
</macros>

