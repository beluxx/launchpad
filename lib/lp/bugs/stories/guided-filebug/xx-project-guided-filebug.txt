Filing bugs on ProjectGroups
============================

Even though it's not possible to file bugs against projects directly,
it's still possible to file a bug from a project's main page.

    >>> user_browser.open('http://launchpad.dev/gnome')
    >>> user_browser.getLink(url='+filebug').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/gnome/+filebug'

The ProjectGroup filebug page is like a Product's filebug page, except
that it also asks for a Product. Only Products that are using Bugs are
shown in the list of options.

    >>> user_browser.getControl('Project', index=0).options
    ['evolution']

After we selected a product and entered a summary, we're sent to the
product's +filebug page and presented with a list of possible duplicates.

    >>> user_browser.getControl('Project', index=0).value = ['evolution']
    >>> user_browser.getControl('Summary', index=0).value = (
    ...     'Evolution crashes')
    >>> user_browser.getControl('Continue').click()

    >>> user_browser.url
    'http://bugs.launchpad.dev/evolution/+filebug?field.actions.search=Continue&field.title=Evolution+crashes&field.tags='
    >>> print find_main_content(user_browser.contents).renderContents()
    <...
    No similar bug reports were found...

Entering a description and submitting the bug takes the user to the bug
page.

    >>> user_browser.getControl('Further information').value = 'Crash.'
    >>> user_browser.getControl('Submit Bug Report').click()
    >>> user_browser.url
    'http://bugs.launchpad.dev/evolution/+bug/...'

    >>> user_browser.title
    'Bug #...Evolution crashes... : Bugs : Evolution'


Empty ProjectGroups
-------------------

It isn't possible to file a bug against an empty project. However, we
give the user some feedback in this regard. We need to create a new
project first.

    >>> admin_browser.open('http://launchpad.dev/projectgroups/+new')
    >>> admin_browser.getControl('Name:', index=0).value = 'test-group'
    >>> admin_browser.getControl('Display Name:').value = 'Test Group'
    >>> admin_browser.getControl('Title:').value = 'Test Group'
    >>> admin_browser.getControl('Project Group Summary:').value = 'Summary'
    >>> admin_browser.getControl('Description:').value = 'Description'
    >>> admin_browser.getControl('Maintainer:').value = 'cprov'
    >>> admin_browser.getControl('Add').click()
    >>> admin_browser.url
    'http://launchpad.dev/test-group'

A user navigating to the filebug page will see an information message.
The user can only get to the filebug page by entering its URL directly
because all links to the page are disabled for empty project groups.
Since there are users who would navigate to the page in that manner we
test it here.

    >>> user_browser.open('http://launchpad.dev/test-group/+filebug')
    >>> user_browser.url
    'http://launchpad.dev/test-group/+filebug'

    >>> for message in find_tags_by_class(user_browser.contents,
    ...     'informational message'):
    ...     print message.renderContents()
    There are no projects registered for Test Group that use Launchpad to
    track bugs.

If the project registrant visits the filebug page they will see an
additional message:

    >>> admin_browser.open('http://launchpad.dev/test-group/+filebug')

    >>> for message in find_tags_by_class(admin_browser.contents,
    ...     'warning message'):
    ...     print message.renderContents()
    There are no projects registered for Test Group. <br /> You need
    to <a href="/test-group/+newproduct">register another project that
    is part of Test Group</a> or associate an existing project with
    it.


ProjectGroups With no Products Using Launchpad Bugs
---------------------------------------------------

If we add a new product to our test project (specifically one that
doesn't use Launchpad for bug tracking) information about that product
will also be displayed.

    >>> admin_browser.open('http://launchpad.dev/test-group/+newproduct')
    >>> admin_browser.getControl(name='field.name', index=0).value = 'testy'
    >>> admin_browser.getControl(name='field.displayname').value = (
    ...     'Testy Product')
    >>> admin_browser.getControl(name='field.title').value = (
    ...     'A Product for Testing')
    >>> admin_browser.getControl(name='field.summary').value = (
    ...     'Used for testing')
    >>> admin_browser.getControl('Continue').click()
    >>> print admin_browser.url
    http://launchpad.dev/test-group/+newproduct

    >>> admin_browser.getControl(name='field.licenses').value = ['GNU_GPL_V2']
    >>> admin_browser.getControl('Complete Registration').click()
    >>> admin_browser.url
    'http://launchpad.dev/testy'

The user will now see the new product on the project's +filebug page,
but will not be able to file a bug against it.

    >>> user_browser.reload()
    >>> for message in find_tags_by_class(user_browser.contents,
    ...     'informational message'):
    ...     print message.renderContents()
    There are no projects registered for Test Group that use Launchpad to
    track bugs.

Testy Product doesn't use define an external bug tracker and isn't
registered in any source packages and the user is told this.

    >>> print extract_text(find_tag_by_id(user_browser.contents,
    ...     'product-list-summary'))
    There is 1 project registered as part of Test Group but it does not use
    Launchpad as its bug tracker.

    >>> for tag in find_tags_by_class(
    ...     user_browser.contents, 'product-bug-options'):
    ...     print extract_text(tag)
    Testy Product
    Testy Product does not use an external bug tracker or has not registered
    it with launchpad.
    Testy Product is not registered with any source packages. You can help by
    linking them for us.

The user will also be presented with a link to the product's overview
page:

    >>> user_browser.getLink('Testy Product').url
    'http://launchpad.dev/testy'

If we set up an external bug tracker for Testy Product, this will be
reflected in the Test Group's filebug page.

    >>> from zope.component import getUtility
    >>> from lp.app.interfaces.launchpad import ILaunchpadCelebrities

    >>> login('admin@canonical.com')
    >>> ubuntu = getUtility(ILaunchpadCelebrities).ubuntu
    >>> hoary = ubuntu.getSeries('hoary')
    >>> thunderbird_spn = factory.getOrMakeSourcePackageName('thunderbird')
    >>> spph = factory.makeSourcePackagePublishingHistory(
    ...     sourcepackagename=thunderbird_spn, distroseries=hoary)
    >>> logout()

    >>> admin_browser.open('http://launchpad.dev/testy/+configure-bugtracker')
    >>> admin_browser.getControl(name='field.bugtracker').value = ['external']
    >>> admin_browser.getControl(
    ...     name='field.bugtracker.bugtracker').value = 'debbugs'
    >>> admin_browser.getControl('Change').click()

And on the filebug page...

    >>> user_browser.reload()
    >>> print extract_text(find_tag_by_id(user_browser.contents,
    ...     'product-list-summary'))
    There is 1 project registered as part of Test Group but it does not use
    Launchpad as its bug tracker.

    >>> for tag in find_tags_by_class(
    ...     user_browser.contents, 'product-bug-options'):
    ...     print extract_text(tag)
    Testy Product
    External bug tracker: Debian Bug tracker.
    Testy Product is not registered with any source packages. You can help by
    linking them for us.

Finally, we add Testy Product to a source package:

    >>> admin_browser.open('http://bugs.launchpad.dev/testy/trunk/+ubuntupkg')
    >>> admin_browser.getControl('Source Package Name').value = 'thunderbird'
    >>> admin_browser.getControl('Update').click()

And this is also shown on the filebug page:

    >>> user_browser.reload()
    >>> user_browser.reload()
    >>> print extract_text(find_tag_by_id(user_browser.contents,
    ...     'product-list-summary'))
    There is 1 project registered as part of Test Group but it does not use
    Launchpad as its bug tracker.

    >>> for tag in find_tags_by_class(
    ...     user_browser.contents, 'product-bug-options'):
    ...     print extract_text(tag)
    Testy Product
    External bug tracker: Debian Bug tracker.
    Source package: Ubuntu thunderbird (File a bug here)

We should be able to follow the link to the Ubuntu thunderbird source
package to file a bug:

    >>> user_browser.getLink('File a bug here').click()
    >>> user_browser.url
    'http://launchpad.dev/ubuntu/+source/thunderbird/+filebug'
