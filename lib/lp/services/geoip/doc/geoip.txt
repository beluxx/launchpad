GeoIP
=====

GeoIP allows us to guess the location of a user based on their IP address.
Our IGeoIP utility provides a couple methods to get location information
from a given IP address.

    >>> from lp.services.geoip.interfaces import IGeoIP
    >>> geoip = getUtility(IGeoIP)

The getCountryByAddr() method will return the country of the given IP
address.

    >>> geoip.getCountryByAddr('201.13.165.145').name
    u'Brazil'

When running tests the IP address will start with '127.', and GeoIP
would, obviously, fail to find the country for that, so we return None.

    >>> print(geoip.getCountryByAddr('127.0.0.88'))
    None

We do the same trick for any IP addresses on private networks.

    >>> print(geoip.getCountryByAddr('10.0.0.88'))
    None

    >>> print(geoip.getCountryByAddr('192.168.0.7'))
    None

    >>> print(geoip.getCountryByAddr('172.16.0.1'))
    None

    >>> print(geoip.getCountryByAddr('::1'))
    None

    >>> print(geoip.getCountryByAddr('fc00::1'))
    None

IGeoIP also provides a getRecordByAddress() method, which returns a dict
containing a bunch more information about that IP's location.

    >>> record = geoip.getRecordByAddress('201.13.165.145')
    >>> for key, value in sorted(record.items()):
    ...     print "%s: %s" % (key, value)
    area_code: ...
    city: ...
    country_code: BR
    country_code3: BRA
    country_name: Brazil
    dma_code: ...
    latitude: ...
    longitude: ...
    postal_code: ...
    region: ...
    region_name: ...
    time_zone: ...

And again we'll return None if the address is private.

    >>> print(geoip.getRecordByAddress('127.0.0.1'))
    None

If it can't find a GeoIP record for the given IP address, it will return
None.

    >>> print geoip.getRecordByAddress('255.255.255.255')
    None
