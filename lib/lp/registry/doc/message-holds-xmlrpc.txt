=====================================
XMLRPC interface for holding messages
=====================================

Messages posted to Launchpad mailing lists can be held for team owner
approval, for any of several reasons.  See `message-hold.txt` for details.

When a message is held for approval, Mailman will send the message text to
Launchpad to be eventually displayed in Launchpad's u/i.

    >>> login('foo.bar@canonical.com')
    >>> team_one, list_one = factory.makeTeamAndMailingList(
    ...     'team-one', 'no-priv')
    >>> anne = factory.makePersonByName('Anne')

    # We don't care about the email notifications sent when the mailing
    # list was created, and we don't want the notification to confuse
    # things later on in this test, so clear the queue.
    >>> from lp.testing import mail_helpers
    >>> ignore = mail_helpers.pop_notifications()

Anne posts a message to the Team One list, but because she is not a member of
the list, Mailman will hold the message for the team's administrators to
approve or reject.

    >>> from email import message_from_string
    >>> message_anne = message_from_string("""\
    ... From: anne.person@example.com
    ... To: team-one@lists.launchpad.dev
    ... Subject: A question
    ... Message-ID: <first-post>
    ... Date: Fri, 01 Aug 2000 01:08:59 -0000
    ...
    ... I have a question about this team.
    ... """)

    >>> mailinglist_api.holdMessage('team-one', message_anne.as_string())
    True
    >>> transaction.commit()

This message is now in Launchpad's librarian and accessible through the
IMessageApprovalSet interface.

    >>> from lp.registry.interfaces.mailinglist import IMessageApprovalSet
    >>> message_set = getUtility(IMessageApprovalSet)
    >>> held_message_anne = message_set.getMessageByMessageID('<first-post>')
    >>> print held_message_anne.message_id
    <first-post>
    >>> print held_message_anne.posted_by.displayname
    Anne Person

    >>> held_message_anne.posted_message.open()
    >>> try:
    ...     print held_message_anne.posted_message.read()
    ... finally:
    ...     held_message_anne.posted_message.close()
    From: anne.person@example.com
    To: team-one@lists.launchpad.dev
    Subject: A question
    Message-ID: <first-post>
    Date: ...
    <BLANKLINE>
    I have a question about this team.
    <BLANKLINE>
    >>> held_message_anne.status
     <DBItem PostedMessageStatus.NEW, (0) New status>

A notification message is sent to every team administrator informing
them that there is a message waiting for their approval.

    >>> mail_helpers.print_emails()
    From: Team One <noreply@launchpad.net>
    To: no-priv@canonical.com
    Subject: New mailing list message requiring approval for Team One
    <BLANKLINE>
    Hello No Privileges Person,
    <BLANKLINE>
    Team One has a new message requiring your approval.
    <BLANKLINE>
        Subject: A question
        Author name: Anne Person
        Author url: http://launchpad.dev/~anne
        Date: 2000-08-01 01:08:59+00:00
        Message-ID: <first-post>
    <BLANKLINE>
    A message has been posted to the mailing list for your team, but this
    message requires your approval before it will be sent to the list
    members.  After reviewing the message, you may approve, discard or
    reject it.
    <BLANKLINE>
    To review all messages pending approval, visit:
    <BLANKLINE>
        http://launchpad.dev/~team-one/+mailinglist-moderate
    <BLANKLINE>
    Regards,
    The Launchpad team
    ----------------------------------------

There are no messages waiting to be handled by Mailman yet.

    >>> mailinglist_api.getMessageDispositions()
    {}

Anne's message is on-topic so the list administrator approves it.

    >>> held_message_anne.approve(team_one.teamowner)
    >>> transaction.commit()
    >>> held_message_anne.status
    <DBItem PostedMessageStatus.APPROVAL_PENDING, (20) Approval pending>

However, Bart also sends a message to the team, but this one is off-topic so
the list administrator rejects it.

    >>> bart = factory.makePersonByName('Bart')
    >>> message_bart = message_from_string("""\
    ... From: bart.person@example.com
    ... To: team-one@lists.launchpad.dev
    ... Subject: What do Python's eat?
    ... Message-ID: <second-post>
    ... Date: Fri, 01 Aug 2000 01:08:59 -0000
    ...
    ... My snake is hungry and doesn't like the crickets!
    ... """)

    >>> mailinglist_api.holdMessage('team-one', message_bart.as_string())
    True
    >>> held_message_bart = message_set.getMessageByMessageID('<second-post>')
    >>> held_message_bart.reject(team_one.teamowner)
    >>> transaction.commit()

    >>> held_message_bart.status
    <DBItem PostedMessageStatus.REJECTION_PENDING, (30) Decline pending>

Cris sends spam to the mailing list, which is simply discarded.

    >>> cris = factory.makePersonByName('Cris')
    >>> message_cris = message_from_string("""\
    ... From: cris.person@example.com
    ... To: team-one@lists.launchpad.dev
    ... Subject: Snakes and Arrows
    ... Message-ID: <third-post>
    ... Date: Fri, 01 Aug 2000 01:08:59 -0000
    ...
    ... Would you like to buy some snakes or arrows?
    ... """)

    >>> mailinglist_api.holdMessage('team-one', message_cris.as_string())
    True
    >>> held_message_cris = message_set.getMessageByMessageID('<third-post>')
    >>> held_message_cris.discard(team_one.teamowner)
    >>> transaction.commit()

    >>> held_message_cris.status
    <DBItem PostedMessageStatus.DISCARD_PENDING, (60) Discard pending>

Now there are three messages waiting for Mailman to handle.

    >>> from lp.registry.tests.mailinglists_helper import print_dispositions
    >>> dispositions = mailinglist_api.getMessageDispositions()
    >>> print_dispositions(dispositions)
    <first-post> team-one accept
    <second-post> team-one decline
    <third-post> team-one discard

Now that Mailman's received the dispositions, the messages have been
transitioned to their permanent states.

    >>> held_message_anne = message_set.getMessageByMessageID('<first-post>')
    >>> held_message_anne.status
    <DBItem PostedMessageStatus.APPROVED, (40) Approved>
    >>> held_message_bart = message_set.getMessageByMessageID('<second-post>')
    >>> held_message_bart.status
    <DBItem PostedMessageStatus.REJECTED, (50) Rejected>
    >>> held_message_cris = message_set.getMessageByMessageID('<third-post>')
    >>> held_message_cris.status
    <DBItem PostedMessageStatus.DISCARDED, (70) Discarded>


Private teams
=============

When a private team has a mailing list, its messages can also be held
for moderator approval.

    >>> from lp.registry.interfaces.person import (
    ...     IPersonSet, PersonVisibility, TeamMembershipPolicy)
    >>> no_priv = getUtility(IPersonSet).getByName('no-priv')
    >>> team_private = factory.makeTeam(
    ...     no_priv, name='team-private',
    ...     membership_policy=TeamMembershipPolicy.RESTRICTED,
    ...     visibility=PersonVisibility.PRIVATE)

    >>> from lp.registry.interfaces.mailinglist import IMailingListSet
    >>> list_private = getUtility(IMailingListSet).new(team_private)
    >>> transaction.commit()

    >>> ignore = mail_helpers.pop_notifications()
    >>> private_message = message_from_string("""\
    ... From: cris.person@example.com
    ... To: team-private@lists.launchpad.dev
    ... Subject: Counterparts
    ... Message-ID: <fourth-post>
    ... Date: Fri, 01 Aug 2009 01:08:59 -0000
    ...
    ... Would you like to buy some counter parts?
    ... """)

    >>> mailinglist_api.holdMessage(
    ...     'team-private', private_message.as_string())
    True
    >>> transaction.commit()

Once the message is approved in Launchpad, Mailman will allow it to be posted
to the mailing list.

    >>> held_message_private = message_set.getMessageByMessageID(
    ...     '<fourth-post>')
    >>> held_message_private.approve(team_private.teamowner)
    >>> transaction.commit()

    >>> dispositions = mailinglist_api.getMessageDispositions()
    >>> print_dispositions(dispositions)
    <fourth-post> team-private accept


Non-ascii messages
==================

Messages with non-ascii in their headers are not exactly legal
(they should be encoded) but do occur especially in spam.  These
messages can be held for moderator approval too. To avoid blowing up
later if the string is converted to a unicode object, the non-ascii
characters are replaced.

    >>> spam_message = message_from_string("""\
    ... From: Anne \xa9 Person <anne.person@example.com>
    ... To: team-one@lists.launchpad.dev
    ... Subject: \xa9 Badgers!
    ... Message-ID: <fifth-post\xa9>
    ... Date: Fri, 01 Aug 2000 01:08:59 -0000
    ...
    ... Don't escape non-ascii characters in the body! \xa9
    ... """)

    >>> import xmlrpclib
    >>> mailinglist_api.holdMessage(
    ...     'team-one',
    ...     xmlrpclib.Binary(spam_message.as_string()))
    True
    >>> transaction.commit()

    >>> held_message_spam = message_set.getMessageByMessageID(
    ...     '<fifth-post\\xa9>')
    >>> print held_message_spam.message_id
    <fifth-post\xa9>
    >>> print held_message_spam.posted_by.displayname
    Anne Person

    >>> held_message_spam.posted_message.open()
    >>> try:
    ...     message_content = held_message_spam.posted_message.read()
    ... finally:
    ...     held_message_spam.posted_message.close()
    >>> print pretty(message_content.splitlines())
    ['From: Anne \\xa9 Person <anne.person@example.com>',
     'To: team-one@lists.launchpad.dev',
     'Subject: \\xa9 Badgers!',
     'Message-ID: <fifth-post\\xa9>',
     'Date: Fri, 01 Aug 2000 01:08:59 -0000',
     '',
     "Don't escape non-ascii characters in the body! \xa9"]

    >>> held_message_spam.status
     <DBItem PostedMessageStatus.NEW, (0) New status>
