= IHasBugs =

Objects that are linked to collections of bug tasks provide the IHasBugs
interface. IHasBugs provides properties representing the relationship
between the object and some of the bug tasks connected to it, and allows
searching through the list of bugs.

    >>> from zope.component import getUtility
    >>> from lp.services.webapp.testing import verifyObject
    >>> from lp.bugs.interfaces.bugtarget import IHasBugs
    >>> from lp.registry.interfaces.distribution import IDistributionSet
    >>> distroset = getUtility(IDistributionSet)
    >>> debian = distroset.getByName("debian")
    >>> debian_firefox = debian.getSourcePackage("mozilla-firefox")
    >>> verifyObject(IHasBugs, debian_firefox)
    True

Open bugtasks:

    >>> [bugtask.bug.id for bugtask in debian_firefox.open_bugtasks]
    [1, 2, 3]

Closed bugtasks:

    >>> [bugtask.bug.id for bugtask in debian_firefox.closed_bugtasks]
    [8]

For the next couple of examples, we'll temporarily modify some bugtask
values to have some sample data for the examples that follow.

    >>> login("foo.bar@canonical.com")

    >>> from lp.bugs.interfaces.bugtask import (
    ...     BugTaskImportance,
    ...     BugTaskStatus,
    ...     IBugTaskSet,
    ...     )

    >>> bug_one_in_debian_firefox = getUtility(IBugTaskSet).get(4)
    >>> bug_two_in_debian_firefox = getUtility(IBugTaskSet).get(5)
    >>> bug_one_in_debian_firefox.transitionToImportance(
    ...     BugTaskImportance.CRITICAL, getUtility(ILaunchBag).user)
    >>> bug_one_in_debian_firefox.transitionToStatus(
    ...     BugTaskStatus.INPROGRESS, getUtility(ILaunchBag).user)
    >>> bug_two_in_debian_firefox.transitionToStatus(
    ...     BugTaskStatus.INPROGRESS, getUtility(ILaunchBag).user)

    >>> from lp.services.database.sqlbase import flush_database_updates
    >>> flush_database_updates()

Critical bugtasks:

    >>> [bugtask.bug.id for bugtask in debian_firefox.critical_bugtasks]
    [1]

In progress bugtasks:

    >>> [bugtask.bug.id for bugtask in debian_firefox.inprogress_bugtasks]
    [1, 2]

Unassigned bugtasks:

    >>> [bugtask.bug.id for bugtask in debian_firefox.unassigned_bugtasks]
    [1, 3]

All bugtasks ever reported:

    >>> [bugtask.bug.id for bugtask in debian_firefox.all_bugtasks]
    [1, 2, 3, 8]

IHasBugs.has_bugtasks is True if at least on bugtask exists.

    >>> debian_firefox.has_bugtasks
    True

For a new product, has_bugtasks is False.

    >>> product = factory.makeProduct()
    >>> product.has_bugtasks
    False

When we add a bug, the property becomes True.

    >>> bug = factory.makeBug(product=product)
    >>> product.has_bugtasks
    True

Note that bugtasks having the status BugTaskStatus.UNKNOWN are not
considered for has_bugtasks.

    >>> from lp.bugs.interfaces.bugtask import BugTaskStatus
    >>> bug.default_bugtask.transitionToStatus(
    ...     BugTaskStatus.UNKNOWN, user=bug.owner)
    >>> product.has_bugtasks
    False
