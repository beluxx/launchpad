= Searching for projects, project-groups and distributions =

Launchpad provides a way for people to search across products, projects and
distributions.

    >>> anon_browser.open('http://launchpad.dev/projects')
    >>> project_search = anon_browser.getForm(id='project-search')
    >>> project_search.getControl(name='text').value = 'whizzbar'
    >>> anon_browser.getControl('Search', index=0).click()
    >>> anon_browser.url
    'http://launchpad.dev/projects/+index?text=whizzbar'

The user is informed when no matches are found.

    >>> print extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'no-matches'))
    No projects matching ...whizzbar... were found...

Launchpad shows up to config.launchpad.default_batch_size results; if there
are more results than that, the user sees an informational message that asks
the user to refine his search.

    >>> from lp.services.config import config
    >>> config.launchpad.default_batch_size
    5

    >>> anon_browser.open('http://launchpad.dev/projects')
    >>> project_search = anon_browser.getForm(id='project-search')
    >>> project_search.getControl(name='text').value = 'ubuntu'
    >>> project_search.getControl('Search').click()
    >>> anon_browser.url
    'http://launchpad.dev/projects/+index?text=ubuntu'

    >>> content = find_main_content(anon_browser.contents)
    >>> print extract_text(find_tag_by_id(content, 'search-summary'))
    6 projects found matching ...ubuntu..., showing the most relevant 5

    >>> print extract_text(find_tag_by_id(content, 'too-many-matches'))
    More than 5 projects were found.
    You can do another search with more relevant search terms.

A lower search form is shown when there are matches.

    >>> print find_tag_by_id(content, 'project-search-lower').name
    form

The search results contain projects, project-groups, and distributions.

    >>> def print_search_results(abrowser):
    ...     search_results = find_tag_by_id(
    ...         abrowser.contents, 'search-results')
    ...     for tr in search_results.tbody('tr'):
    ...         print tr.td.a['class'], extract_text(tr.td.a)
    >>> print_search_results(anon_browser)
    sprite distribution Ubuntu
    sprite distribution ubuntutest
    sprite product Evolution
    sprite product Tomcat
    sprite product Gnome Applets

The user can follow one of these links to go straight to the project,
project-group, or distribution.

    >>> anon_browser.getLink('Tomcat').click()
    >>> anon_browser.url
    'http://launchpad.dev/tomcat'

If the user searches without any search terms, the page asks him to enter
some terms and do another search.

    >>> anon_browser.open('http://launchpad.dev/projects')
    >>> project_search = anon_browser.getForm(id='project-search')
    >>> project_search.getControl(name='text').value
    ''
    >>> project_search.getControl('Search').click()
    >>> empty_search = find_tag_by_id(anon_browser.contents, 'empty-search-string')
    >>> print empty_search.renderContents()
    <BLANKLINE>
    ...Enter one or more words related to the project you want to find.
    <BLANKLINE>

== Searching only for project groups ==

A similar page is available for only searching project groups.

    >>> anon_browser.open('http://launchpad.dev/projectgroups')
    >>> search = anon_browser.getForm(id='projectgroup-search')
    >>> search.getControl(name='text').value = 'gnome'
    >>> search.getControl('Search').click()
    >>> anon_browser.url
    'http://launchpad.dev/projectgroups/+index?text=gnome'

    >>> tags = find_tags_by_class(
    ...     anon_browser.contents, "informational message")
    >>> for tag in tags:
    ...   print tag.renderContents()

The search results contains only project-groups.

    >>> print extract_text(
    ...     find_main_content(anon_browser.contents).findAll('p')[1])
    1 project group found matching ...gnome...

== Showing icons ==

Each item in the search result has an image. By default it's the standard
images used for projects, project-groups, and distributions. Also, the user
can enter the search string in the URL, saving them a page load.

    >>> anon_browser.open('http://launchpad.dev/projects?text=ubuntu')
    >>> print_search_results(anon_browser)
    sprite distribution Ubuntu
    sprite distribution ubuntutest
    sprite product Evolution
    sprite product Tomcat
    sprite product Gnome Applets

If the project has specified an icon, that is shown in the listing
instead.

    >>> import os.path
    >>> import canonical.launchpad
    >>> image_dir = os.path.join(
    ...     os.path.dirname(canonical.launchpad.__file__), 'images')
    >>> ubuntu_icon = open(os.path.join(image_dir, 'branch.png'))

    >>> admin_browser.open('http://launchpad.dev/ubuntu/+edit')
    >>> emblem_ctrl = admin_browser.getControl(name='field.icon.action')
    >>> emblem_ctrl.getControl('Change to').selected = True
    >>> admin_browser.getControl(name='field.icon.image').add_file(
    ...     ubuntu_icon, 'image/png', 'ubuntu-icon.png')
    >>> admin_browser.getControl('Change', index=-1).click()
    >>> admin_browser.url
    'http://launchpad.dev/ubuntu'

    >>> anon_browser.open('http://launchpad.dev/projects?text=ubuntu')
    >>> print_search_results(anon_browser)
    bg-image Ubuntu
    sprite distribution ubuntutest
    sprite product Evolution
    sprite product Tomcat
    sprite product Gnome Applets


== Robustness ==

When multiple search strings are submitted, an UnexpectedFormData is
raised:

    >>> anon_browser.open(
    ...     'http://launchpad.dev/projects/?text=foo&text=bar')
    Traceback (most recent call last):
      ...
    UnexpectedFormData: ...
