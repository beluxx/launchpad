Product index
=============

Translation Pages
-----------------

    >>> user_browser.open('http://launchpad.dev/evolution')

The product page has a link to help translate it.

    >>> link = user_browser.getLink(
    ...     url='http://translations.launchpad.dev/evolution')
    >>> link.click()
    >>> print user_browser.title
    Translations : Evolution


Links and Programming languages
-------------------------------

Evolution has no external links.

    >>> print find_tag_by_id(user_browser.contents, 'external-links-heading')
    None

Now update Tomcat to actually have this data:

    >>> import transaction
    >>> from lp.services.database.sqlbase import flush_database_updates
    >>> from lp.registry.model.product import Product
    >>> from lp.testing import ANONYMOUS, login, logout
    >>> login(ANONYMOUS)

    >>> tomcat = Product.selectOneBy(name="tomcat")
    >>> tomcat.homepageurl = "http://home.page/"
    >>> tomcat.freshmeatproject = "fm-tomcat"
    >>> tomcat.sourceforgeproject = "sf-tomcat"
    >>> tomcat.wikiurl = "http://wiki.url/"
    >>> tomcat.screenshotsurl = "http://screenshots.url/"
    >>> tomcat.downloadurl = "http://download.url/"
    >>> tomcat.programminglang = "C++,Xenon and Purple"

    >>> logout()
    >>> flush_database_updates()
    >>> transaction.commit()

Let's check it out:

    >>> browser.open('http://launchpad.dev/tomcat')
    >>> content = find_main_content(browser.contents)
    >>> external_links = find_tag_by_id(content, 'external-links')
    >>> for link in external_links.findAll('a'):
    ...     print extract_text(link), link['href']
    Home page http://home.page/
    Sourceforge project http://sourceforge.net/projects/sf-tomcat
    Freshmeat record http://freshmeat.net/projects/fm-tomcat
    Wiki http://wiki.url/
    Screenshots http://screenshots.url/
    External downloads http://download.url/

    >>> print extract_text(find_tag_by_id(content, 'product-languages'))
    Programming Languages: C++,Xenon and Purple

When the freshmeat or sourceforge URLs are identical to the homepage, we
omit the homepage:

    >>> login(ANONYMOUS)

    >>> tomcat = Product.selectOneBy(name="tomcat")
    >>> tomcat.homepageurl = "http://sourceforge.net/projects/sf-tomcat"

    >>> logout()
    >>> flush_database_updates()
    >>> transaction.commit()

    >>> browser.open('http://launchpad.dev/tomcat')
    >>> content = find_main_content(browser.contents)
    >>> external_links = find_tag_by_id(content, 'external-links')
    >>> for link in external_links.findAll('a'):
    ...     print extract_text(link), link['href']
    Sourceforge project http://sourceforge.net/projects/sf-tomcat
    Freshmeat record http://freshmeat.net/projects/fm-tomcat
    Wiki http://wiki.url/
    Screenshots http://screenshots.url/
    External downloads http://download.url/

    >>> login(ANONYMOUS)

    >>> tomcat = Product.selectOneBy(name="tomcat")
    >>> tomcat.homepageurl = "http://freshmeat.net/projects/fm-tomcat"

    >>> logout()
    >>> flush_database_updates()
    >>> transaction.commit()

    >>> browser.open('http://launchpad.dev/tomcat')
    >>> content = find_main_content(browser.contents)
    >>> external_links = find_tag_by_id(content, 'external-links')
    >>> for link in external_links.findAll('a'):
    ...     print extract_text(link), link['href']
    Sourceforge project http://sourceforge.net/projects/sf-tomcat
    Freshmeat record http://freshmeat.net/projects/fm-tomcat
    Wiki http://wiki.url/
    Screenshots http://screenshots.url/
    External downloads http://download.url/


Licensing alerts
================

A project that has not set a license is marked as 'Unspecified'.

    >>> user_browser.open('http://launchpad.dev/firefox')
    >>> print extract_text(
    ...     find_tag_by_id(user_browser.contents, 'license-status'))
    This project&rsquo;s license has not been specified.

If the project doesn't have a license, a portlet is displayed to direct
the owner to set a license.

    >>> from lp.registry.interfaces.product import License
    >>> firefox = Product.selectOneBy(name="firefox")
    >>> owner_browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> owner_browser.open('http://launchpad.dev/firefox')
    >>> print extract_text(
    ...     find_tag_by_id(owner_browser.contents, 'license-status'))
    This project&rsquo;s license has not been specified.

    >>> print find_tag_by_id(owner_browser.contents,
    ...     'portlet-requires-subscription')
    None

    >>> print find_tag_by_id(owner_browser.contents,
    ...                      'portlet-missing-license')
    <div...Missing license information...</div>

A non-owner does not see the warning that the project is missing
licensing information.

    >>> user_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(user_browser.contents,
    ...     'portlet-missing-license')
    None

A member of the Launchpad Commercial team will see the warning.

    >>> comm_browser = setupBrowser(
    ...     auth='Basic commercial-member@canonical.com:test')
    >>> comm_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(comm_browser.contents,
    ...     'portlet-missing-license')
    <div...Missing license information...</div>

A Launchpad administrator will see the warning.

    >>> admin_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(admin_browser.contents,
    ...     'portlet-missing-license')
    <div...Missing license information...</div>

A project that includes a license of "Other/Open Source" that has not
been reviewed by a Launchpad administrator will be displayed as
'Unreviewed.'

    >>> owner_browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> owner_browser.open('http://launchpad.dev/thunderbird/+edit')
    >>> owner_browser.getControl(name='field.licenses').value = [
    ...     'OTHER_OPEN_SOURCE']
    >>> owner_browser.getControl(name='field.license_info').value = 'foo'
    >>> owner_browser.getControl('Change').click()

Any user can see that the project's license has not been reviewed.

    >>> user_browser.open('http://launchpad.dev/thunderbird')
    >>> print extract_text(
    ...     find_tag_by_id(user_browser.contents, 'license-status'))
    This project&rsquo;s license has not been reviewed.

Changing the state to reviewed but not approved results in the project
being shown as proprietary.

    >>> admin_browser.open('http://launchpad.dev/thunderbird/+review-license')
    >>> admin_browser.getControl(name='field.project_reviewed').value = True
    >>> admin_browser.getControl(name='field.license_approved').value = False
    >>> admin_browser.getControl('Change').click()

    >>> user_browser.open('http://launchpad.dev/thunderbird')
    >>> user_browser.contents
    '<...This project&rsquo;s license is proprietary...

If the project doesn't qualify for free hosting, or if it doesn't have
much time left on its commercial subscription, a portlet is displayed to
direct the owner to purchase a subscription.

    >>> firefox.licenses = [License.OTHER_PROPRIETARY]
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> owner_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(owner_browser.contents, 'license-status')
    <...This project&rsquo;s license is proprietary...

    >>> print find_tag_by_id(owner_browser.contents,
    ...     'portlet-requires-subscription')
    <div...Purchasing a subscription is required...</div>

    >>> print find_tag_by_id(owner_browser.contents,
    ...     'portlet-missing-license')
    None

    >>> owner_browser.getLink('Purchase a subscription.').click()
    >>> owner_browser.url
    'http://launchpad.dev/firefox/+purchase-subscription'

    >>> print find_tags_by_class(owner_browser.contents, 'error message')
    []

    >>> owner_browser.getLink('Canonical Shop')
    <Link...url='http://ubuntu.recycledmania.com...'>

    >>> owner_browser.getLink('voucher management page')
    <Link...url='http://launchpad.dev/~name12/+vouchers'...>

Any user can see that the project's license is proprietary.

    >>> user_browser.open('http://launchpad.dev/firefox')
    >>> user_browser.contents
    '<...This project&rsquo;s license is proprietary...

A non-owner does not see that a commercial subscription is due, and the
+purchase-subscription page will display an error. A user would have to
load that page directly, since the link is not displayed.

    >>> print find_tag_by_id(user_browser.contents,
    ...                      'portlet-requires-subscription')
    None

    >>> user_browser.open(
    ...     'http://launchpad.dev/firefox/+purchase-subscription')
    >>> print find_tag_by_id(user_browser.contents, 'permission-error')
    <div...class="error message"...
    You do not have permission to purchase a subscription for this project...

If the project qualifies for free hosting, neither portlet is displayed,
and the +purchase-subscription page will display an error.

    >>> firefox.licenses = [License.GNU_GPL_V2]
    >>> flush_database_updates()
    >>> transaction.commit()
    >>> owner_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(owner_browser.contents,
    ...                      'portlet-requires-subscription')
    None

    >>> print find_tag_by_id(owner_browser.contents,
    ...                      'portlet-missing-license')
    None

    >>> owner_browser.open(
    ...     'http://launchpad.dev/firefox/+purchase-subscription')
    >>> print find_tag_by_id(owner_browser.contents, 'free-hosting-error')
    <div...class="error message"...
    This project does not require a commercial subscription to be purchased...

If the project's license is open source, the license status is not
displayed on the index page, since most projects fall into this
category.

    >>> user_browser.open('http://launchpad.dev/firefox')
    >>> print find_tag_by_id(owner_browser.contents, 'license-status')
    None


Commercial Subscription Expiration
----------------------------------

If the project has redeemed a voucher for a commercial subscription then
the expiration date is shown to the project maintainers, Launchpad
admins, and members of the Launchpad commercial team.

Redeem a voucher to enable the subscription.

    >>> owner_browser = setupBrowser(auth='Basic bac@canonical.com:test')
    >>> owner_browser.open('http://launchpad.dev/people/+me/+vouchers')
    >>> owner_browser.getControl(
    ...     name='field.project').value = 'mega-money-maker'
    >>> owner_browser.getControl(name='field.voucher').value = [
    ...     'LPCBS12-f78df324-0cc2-11dd-8b6b-bac000000005']
    >>> owner_browser.getControl('Redeem').click()
    >>> for message in get_feedback_messages(owner_browser.contents):
    ...     print message
    Voucher redeemed successfully

 The owner will now see the expiration information on the project
 overview page.

    >>> owner_browser.open('http://launchpad.dev/mega-money-maker')
    >>> print extract_text(find_tag_by_id(owner_browser.contents,
    ...                      'commercial_subscription'))
    Commercial subscription expires ...

Commercial team members will see the expiration information.

    >>> comm_browser = setupBrowser(
    ...     auth='Basic commercial-member@canonical.com:test')
    >>> comm_browser.open('http://launchpad.dev/mega-money-maker')
    >>> print extract_text(find_tag_by_id(comm_browser.contents,
    ...                      'commercial_subscription'))
    Commercial subscription expires ...

Launchpad administrators will see the expiration information.

    >>> admin_browser.open('http://launchpad.dev/mega-money-maker')
    >>> print extract_text(find_tag_by_id(admin_browser.contents,
    ...                      'commercial_subscription'))
    Commercial subscription expires ...


Development
-----------

The project page shows the series that is the focus of development.

    >>> anon_browser.open('http://launchpad.dev/firefox')
    >>> print extract_text(
    ...     find_tag_by_id(anon_browser.contents, 'development-focus'))
    Mozilla Firefox trunk series  is the current focus of development

The page has a link to view the project's milestones.

    >>> anon_browser.getLink('View milestones')
    <Link ... url='http://launchpad.dev/firefox/+milestones'>

Project owners and driver can see a link to register series.

    >>> owner_browser = setupBrowser(auth="Basic test@canonical.com:test")
    >>> owner_browser.open('http://launchpad.dev/firefox')
    >>> owner_browser.getLink('Register a series')
    <Link ... url='http://launchpad.dev/firefox/+addseries'>


Aliases
-------

When a project has one or more aliases, they're shown on the project's
home page.

    >>> Product.byName("firefox").setAliases(['iceweasel', 'snowchicken'])
    >>> anon_browser.open('http://launchpad.dev/firefox')
    >>> print extract_text(find_tag_by_id(anon_browser.contents, 'aliases'))
    Also known as: iceweasel, snowchicken


Ubuntu packaging
----------------

If a product is packaged in Ubuntu the links are shown.

    >>> user_browser.open('http://launchpad.dev/firefox')
    >>> print extract_text(
    ...     find_tag_by_id(user_browser.contents, 'portlet-packages'))
    All packages
    Packages in Distributions
    “mozilla-firefox” source package in Warty Version 0.9 uploaded on...

A product that has linked packages now displays suggestions and asks
the user to select the package.

    >>> login(ANONYMOUS)
    >>> product = factory.makeProduct(name='pmount')
    >>> logout()
    >>> user_browser.open('http://launchpad.dev/pmount')
    >>> print extract_text(
    ...     find_tag_by_id(user_browser.contents, 'portlet-packages'))
    All packages...
    Packages in Distributions...
    Ubuntu Hoary packages:
    pmount...

    >>> user_browser.getControl(
    ...     name='field.distributionsourcepackage').value = ['pmount']
    >>> user_browser.getControl('Set Ubuntu Package Information').click()
    >>> print_feedback_messages(user_browser.contents)
    This project was linked to the source package "pmount in Ubuntu"
