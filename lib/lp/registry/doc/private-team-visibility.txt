=========================
 Private team visibility
=========================

Private teams restrict the visibility of their attributes to select
sets of users in order to prevent leaking confidential data.

Private teams restrict the viewing of the membership list
to team administrators, other members of the team, and Launchpad
administrators .

    >>> from lp.registry.interfaces.person import PersonVisibility
    >>> from lp.testing import login_celebrity

    >>> priv_owner = factory.makePerson(name="priv-owner")
    >>> priv_member = factory.makePerson(name="priv-member")
    >>> commercial_admin = login_celebrity('commercial_admin')
    >>> priv_team = factory.makeTeam(owner=priv_owner, name="priv-team",
    ...                              visibility=PersonVisibility.PRIVATE)
    >>> login_person(priv_owner)
    >>> ignored = priv_team.addMember(priv_member, reviewer=priv_owner)

The team owner can see the membership.

    >>> members = priv_team.activemembers
    >>> for member in members:
    ...     print member.name
    priv-member
    priv-owner

A team member can access the membership.

    >>> login_person(priv_member)
    >>> members = priv_team.activemembers

A commercial admin can view private teams and private team memberships.

    >>> from canonical.launchpad.webapp.authorization import check_permission

    >>> commercial_admin = login_celebrity('commercial_admin')
    >>> check_permission('launchpad.View', priv_team)
    True
    >>> team_membership = priv_member.team_memberships[0]
    >>> check_permission('launchpad.View', team_membership)
    True

A person who is not in the team cannot see the membership and cannot
see other details of the team, such as the name.

    >>> login('no-priv@canonical.com')
    >>> members = priv_team.activemembers
    Traceback (most recent call last):
    ...
    Unauthorized: (<Person at ... priv-team (Priv Team)>,
        'activemembers', 'launchpad.View')

    >>> print priv_team.name
    Traceback (most recent call last):
    ...
    Unauthorized: (<Person at ... priv-team (Priv Team)>,
        'name', 'launchpad.LimitedView')

Public teams can join private teams.  When adding one team to another
the team is invited to join and that invitation must be accepted by
one of the invited team's admins.  Normally the admin of the invited
team is not a member of the private team and therefore cannot even see
the page to accept the invitation!  To resolve that situation the
rules for viewing a private team include admins of invited teams.

    >>> pub_owner = factory.makePerson(name="pub-owner")
    >>> pub_member = factory.makePerson(name="pub-member")
    >>> pub_team = factory.makeTeam(owner=pub_owner, name="pubteam")
    >>> login_person(pub_owner)
    >>> ignored = pub_team.addMember(pub_member, reviewer=pub_owner)

At this point the public team owner cannot see the priv-team's bits.

    >>> print priv_team.name
    Traceback (most recent call last):
    ...
    Unauthorized: (<Person at ... priv-team (Priv Team)>,
        'name', 'launchpad.LimitedView')

    >>> login_person(priv_owner)
    >>> ignored = priv_team.addMember(pub_team, reviewer=priv_owner)

The public team is not yet a member of the priv-team.

    >>> pub_team in priv_team.activemembers
    False
    >>> pub_owner in priv_team.activemembers
    False

The public team's owner can now see the priv-team's bits since his team
has been invited to join.

    >>> login_person(pub_owner)
    >>> print priv_team.name
    priv-team

But a non-admin member of the public team still cannot see anything
about the team.

    >>> login_person(pub_member)
    >>> print priv_team.name
    Traceback (most recent call last):
    ...
    Unauthorized: (<Person at ... priv-team (Priv Team)>,
        'name', 'launchpad.LimitedView')

A person with visibility to any of the branches owned by the private team will
be granted limited view permission on the team.

For private branches, a user needs to be subscribed to the branch for the
branch (and hence team) to be visible.

    >>> login_person(priv_owner)
    >>> private_team_branch = factory.makeBranch(
    ...     owner=priv_team, private=True)
    >>> login_person(pub_member)
    >>> check_permission('launchpad.LimitedView', priv_team)
    False

    >>> login_person(priv_owner)
    >>> sub = factory.makeBranchSubscription(
    ...     branch=private_team_branch, person=pub_member,
    ...     subscribed_by=priv_owner)

    >>> login_person(pub_member)
    >>> check_permission('launchpad.LimitedView', priv_team)
    True

User who can see a branch can also see private teams for which reviews have
been requested.
    >>> some_person = factory.makePerson()
    >>> login_person(priv_owner)
    >>> product = factory.makeProduct()
    >>> target_branch = factory.makeBranch(
    ...     owner=priv_owner, private=True, product=product)
    >>> source_branch = factory.makeBranch(
    ...     owner=priv_owner, product=product)
    >>> bmp = factory.makeBranchMergeProposal(
    ...     source_branch=source_branch, target_branch=target_branch,
    ...     reviewer=priv_team, registrant=priv_owner)
    >>> login_person(some_person)
    >>> check_permission('launchpad.LimitedView', priv_team)
    False
    >>> login_person(priv_owner)
    >>> sub = factory.makeBranchSubscription(
    ...     branch=target_branch, person=some_person,
    ...     subscribed_by=priv_owner)

    >>> login_person(some_person)
    >>> check_permission('launchpad.LimitedView', priv_team)
    True

Subscribers to the teams private PPA have limited view permission.

    >>> login_person(priv_owner)
    >>> archive = factory.makeArchive(private=True, owner=priv_team)
    >>> archive_subscriber = factory.makePerson()
    >>> sub = archive.newSubscription(
    ...     archive_subscriber, registrant=archive.owner)

    >>> login_person(archive_subscriber)
    >>> check_permission('launchpad.LimitedView', priv_team)
    True

Users with LimitedView can know identifying information like name,
displayname, and unique_name, but cannot know other information like
teamowner.

    >>> print priv_team.name
    priv-team

    >>> print priv_team.displayname
    Priv Team

    >>> print priv_team.unique_displayname
    Priv Team (priv-team)

    >>> print priv_team.icon
    None

    >>> print priv_team.allmembers
    Traceback (most recent call last):
    ...
    Unauthorized: (<Person at ... priv-team (Priv Team)>,
        'allmembers', 'launchpad.View')

Anonymous users do not have permission.
    >>> login(ANONYMOUS)
    >>> check_permission('launchpad.LimitedView', priv_team)
    False

A team owner must be able to access the team even if they are not a team
member. When a team is created, the owner is automatically made an admin
member. So we revoke that membership and check that they still have access.
    >>> from lp.registry.interfaces.teammembership import (
    ...     ITeamMembershipSet,
    ...     TeamMembershipStatus,
    ...     )
    >>> membership_set = getUtility(ITeamMembershipSet)
    >>> login_person(priv_owner)
    >>> tm = membership_set.getByPersonAndTeam(priv_owner, priv_team)
    >>> tm.setStatus(TeamMembershipStatus.DEACTIVATED, priv_owner)
    True
    >>> priv_owner.inTeam(priv_team)
    False
    >>> check_permission('launchpad.View', priv_team)
    True
