Imports and setup of stub keyserver:

    >>> from zope.component import getUtility
    >>> from lp.services.verification.interfaces.authtoken import (
    ...     LoginTokenType)
    >>> from lp.testing import login, logout, ANONYMOUS
    >>> from lp.services.verification.interfaces.logintoken import (
    ...     ILoginTokenSet)
    >>> from lp.testing.keyserver import KeyServerTac
    >>> from lp.registry.interfaces.person import IPersonSet

    >>> tokenset = getUtility(ILoginTokenSet)
    >>> tac = KeyServerTac()
    >>> tac.setUp()

The following keys are used in these tests:

  pub   1024D/AACCD97C 2005-10-12 [revoked: 2005-10-12]
        Key fingerprint = 84D2 05F0 3E1E 6709 6CB5  4E26 2BE8 3793 AACC D97C
  uid                  Revoked Key <revoked.key@canonical.com>

  pub   1024D/046C6D63 2005-10-12 [expired: 2005-10-13]
        Key fingerprint = ECA5 B797 586F 2E27 381A  16CF DE6C 9167 046C 6D63
  uid                  Expired Key <expired.key@canonical.com>
  sub   2048g/D501190D 2005-10-12 [expired: 2005-10-13]


Attempts to claim a revoked OpenPGP key fail:

    >>> browser.addHeader('Authorization', 'Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~name12/+editpgpkeys')
    >>> browser.getControl(
    ...     name='fingerprint').value = (
    ...     '84D205F03E1E67096CB54E262BE83793AACCD97C')
    >>> browser.getControl('Import Key').click()
    >>> for tag in find_tags_by_class(browser.contents, 'error message'):
    ...     print tag.renderContents()
    <BLANKLINE>
    The key AACCD97C cannot be validated because it has been publicly revoked.
    You will need to generate a new key (using <kbd>gpg --genkey</kbd>) and
    repeat the process to import it.
    <BLANKLINE>


Attempts to claim an expired OpenPGP key also fail:

    >>> browser.getControl(
    ...     name='fingerprint').value = (
    ...     'ECA5B797586F2E27381A16CFDE6C9167046C6D63')
    >>> browser.getControl('Import Key').click()
    >>> for tag in find_tags_by_class(browser.contents, 'error message'):
    ...     print tag.renderContents()
    <BLANKLINE>
    The key 046C6D63 cannot be validated because it has expired. Change the
    expiry date (in a terminal,  enter <kbd>gpg --edit-key
    <var>your@e-mail.address</var></kbd> then enter <kbd>expire</kbd>),
    and try again.
    <BLANKLINE>


It is possible for a key to be revoked or expire between the time it
is claimed and the time the claim is verified.  Therefore, it is
necessary to check the validity at that point too.  To test this, we
will create login tokens for the revoked and expired test keys:

    >>> login(ANONYMOUS)
    >>> person = getUtility(IPersonSet).getByEmail('test@canonical.com')
    >>> logintoken = tokenset.new(
    ...     person, 'test@canonical.com', 'test@canonical.com',
    ...     LoginTokenType.VALIDATEGPG,
    ...     '84D205F03E1E67096CB54E262BE83793AACCD97C')
    >>> revoked_key_token = logintoken.token.encode('ascii')
    >>> logintoken = tokenset.new(
    ...     person, 'test@canonical.com', 'test@canonical.com',
    ...     LoginTokenType.VALIDATEGPG,
    ...     'ECA5B797586F2E27381A16CFDE6C9167046C6D63')
    >>> expired_key_token = logintoken.token.encode('ascii')
    >>> logout()


Try to validate the revoked OpenPGP key:

    >>> browser.open(
    ...     'http://launchpad.dev/token/%s/+validategpg' % revoked_key_token)
    >>> browser.getControl('Continue').click()
    >>> for tag in find_tags_by_class(browser.contents, 'error message'):
    ...     print tag.renderContents()
    There is 1 error.
    The key AACCD97C cannot be validated because it has been publicly revoked.
    You will need to generate a new key (using <kbd>gpg --genkey</kbd>) and
    repeat the previous process to
    <a href="http://launchpad.dev/~name12/+editpgpkeys">find and import</a>
    the new key.


Try to validate the revoked OpenPGP key:

    >>> browser.open(
    ...     'http://launchpad.dev/token/%s/+validategpg' % expired_key_token)
    >>> browser.getControl('Continue').click()
    >>> for tag in find_tags_by_class(browser.contents, 'error message'):
    ...     print tag.renderContents()
    There is 1 error.
    The key 046C6D63 cannot be validated because it has expired. Change the
    expiry date (in a terminal,  enter <kbd>gpg --edit-key
    <var>your@e-mail.address</var></kbd> then enter <kbd>expire</kbd>),
    and try again.

The login tokens are only consumed if they're successfully processed.
Otherwise they're kept around so the user can try again after fixing his
key.

    >>> login(ANONYMOUS)
    >>> tokenset[revoked_key_token].date_consumed is not None
    False
    >>> tokenset[expired_key_token].date_consumed is not None
    False
    >>> logout()


    >>> tac.tearDown()

