= Creating a new team =

== As a regular user ==

Regular users can create teams.

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/people/')
    >>> browser.getLink('Register a team').click()

    >>> browser.url
    'http://launchpad.dev/people/+newteam'

    >>> browser.title
    'Register a new team in Launchpad'

    >>> browser.getControl(name='field.name').value = 'myemail'
    >>> browser.getControl('Display Name').value = 'your own team'
    >>> browser.getControl(
    ...     'Team Description').value = 'my own team description'
    >>> browser.getControl('Subscription period').value = '365'
    >>> browser.getControl('Renewal period').value = '365'
    >>> browser.getControl('Open Team').selected = True
    >>> browser.getControl('Create').click()

    >>> browser.url
    'http://launchpad.dev/~myemail'

    >>> browser.title
    'your own team in Launchpad'

The owner of a team is always added as an administrator of his team.

    >>> from lp.registry.model.person import Person
    >>> [a.name for a in Person.byName('myemail').adminmembers]
    [u'name12']

When creating a new team you can optionally provide a contact email address
for that team. This contact address must not be registered in Launchpad.

    >>> browser.open('http://launchpad.dev/people/+newteam')

    >>> browser.getControl(name='field.name').value = 'newtestteam'
    >>> browser.getControl('Display Name').value = 'newtestteam'
    >>> browser.getControl(
    ...     'Contact Email Address').value = 'test@canonical.com'
    >>> browser.getControl('Team Description').value = 'another test team'
    >>> browser.getControl('Moderated Team').selected = True
    >>> browser.getControl('Create').click()

    >>> for tag in find_tags_by_class(browser.contents, 'message'):
    ...     print extract_text(tag)
    There is 1 error.
    test@canonical.com is already registered in Launchpad and is associated
    with Sample Person.

We also check if the given email address is syntatically valid.

    >>> browser.getControl(
    ...     'Contact Email Address').value = 'testcanonical.com'
    >>> browser.getControl('Create').click()

    >>> for tag in find_tags_by_class(browser.contents, 'message'):
    ...     print extract_text(tag)
    There is 1 error.
    testcanonical.com isn't a valid email address.

Now we enter a valid email address that's not registered in Launchpad.

    >>> browser.getControl('Contact Email Address').value = 'team-foo@bar.com'
    >>> browser.getControl('Create').click()

    >>> browser.url
    'http://launchpad.dev/~newtestteam'

    >>> for tag in find_tags_by_class(
    ...     browser.contents, 'informational message'):
    ...     print tag.renderContents()
    A confirmation message has been sent to 'team-foo@bar.com'. Follow the
    instructions in that message to confirm the new contact address for this
    team. (If the message doesn't arrive in a few minutes, your mail provider
    might use 'greylisting', which could delay the message for up to an hour
    or two.)

== As an administrator ==

Administrators can create teams in much the same manner but they will
also be given the ability to set the team's visibility

    >>> admin_browser.open('http://launchpad.dev/people/')
    >>> admin_browser.getLink('Register a team').click()

    >>> admin_browser.url
    'http://launchpad.dev/people/+newteam'

    >>> admin_browser.title
    'Register a new team in Launchpad'

    >>> admin_browser.getControl(name='field.name').value = 'super-secret'
    >>> admin_browser.getControl('Visibility').value = ['PRIVATE']
    >>> admin_browser.getControl('Display Name').value = 'Shhhh'
    >>> admin_browser.getControl(
    ...     'Team Description').value = 'my own team description'
    >>> admin_browser.getControl('Subscription period').value = '365'
    >>> admin_browser.getControl('Renewal period').value = '365'
    >>> admin_browser.getControl('Open Team').selected = True
    >>> admin_browser.getControl(
    ...     name='field.subscriptionpolicy').value = ['RESTRICTED']
    >>> admin_browser.getControl('Create').click()

    >>> admin_browser.url
    'http://launchpad.dev/~super-secret'

    >>> admin_browser.title
    'Shhhh in Launchpad'

A team with Private visibility must be Restricted.

    >>> admin_browser.open('http://launchpad.dev/people/')
    >>> admin_browser.getLink('Register a team').click()

    >>> admin_browser.getControl(name='field.name').value = (
    ...     'super-duper-secret')
    >>> admin_browser.getControl('Display Name').value = 'Shhhh'
    >>> admin_browser.getControl(
    ...     'Team Description').value = 'my own team description'
    >>> admin_browser.getControl('Subscription period').value = '365'
    >>> admin_browser.getControl('Renewal period').value = '365'
    >>> admin_browser.getControl('Open Team').selected = True
    >>> admin_browser.getControl(
    ...     name='field.subscriptionpolicy').value = ['OPEN']
    >>> admin_browser.getControl('Visibility').value = ['PRIVATE']
    >>> admin_browser.getControl('Create').click()
    >>> for message in get_feedback_messages(admin_browser.contents):
    ...     print message
    There is 1 error.
    Private teams must have a Restricted subscription policy.

= Joining a team =

Karl will join the newly created team.

    >>> browser = setupBrowser(auth='Basic karl@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~myemail')
    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'subscription-policy'))
    Subscription policy:
    Open Team

    >>> browser.getLink('Join the team').click()
    >>> browser.url
    'http://launchpad.dev/~myemail/+join'

    >>> browser.getControl(name='field.actions.join').click()
    >>> browser.url
    'http://launchpad.dev/~myemail'

Since this is an open team, he's automatically approved.

    >>> for tag in find_tags_by_class(browser.contents, 'informational'):
    ...     print tag.renderContents()
    You have successfully joined your own team.

Now, the link to join the team is not present anymore and the +join page will
say that there's no need to join since the user is already a member of that
team.

    >>> browser.getLink('Join the team')
    Traceback (most recent call last):
    ...
    LinkNotFoundError
    >>> browser.open('http://launchpad.dev/~myemail/+join')
    >>> for tag in find_tags_by_class(browser.contents, 'informational'):
    ...     print tag.renderContents()
    You are an active member of this team already.

We have a 'Back' button, though, which just takes the user back to
the team's home page.

    >>> browser.getLink('Back').click()
    >>> browser.url
    'http://launchpad.dev/~myemail'

If this was a moderated team, the membership would not have been automatically
approved, though.

    >>> from lp.registry.interfaces.person import TeamSubscriptionPolicy
    >>> from lp.registry.model.person import Person
    >>> myemail = Person.selectOneBy(name='myemail')
    >>> myemail.subscriptionpolicy = TeamSubscriptionPolicy.MODERATED
    >>> myemail.syncUpdate()

    >>> browser = setupBrowser(
    ...     auth='Basic james.blackwell@ubuntulinux.com:test')
    >>> browser.open('http://launchpad.dev/~myemail')
    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'subscription-policy'))
    Subscription policy:
    Moderated Team

    >>> browser.getLink('Join the team').click()
    >>> browser.url
    'http://launchpad.dev/~myemail/+join'

    >>> print find_tag_by_id(browser.contents, 'maincontent').renderContents()
    <BLANKLINE>
    ...
    Since this is a moderated team, one of its administrators will have to
    approve your membership before you actually become a member.
    ...

If the user changes his mind because this is a moderated team, he can hit
the 'Cancel' button, going back to the team's page...

    >>> browser.getLink('Cancel').click()
    >>> browser.url
    'http://launchpad.dev/~myemail'

...and then do everything again, if he really wants to join.

    >>> browser.getLink('Join the team').click()
    >>> browser.getControl(name='field.actions.join').click()
    >>> browser.url
    'http://launchpad.dev/~myemail'

    >>> for tag in find_tags_by_class(browser.contents, 'informational'):
    ...     print tag.renderContents()
    Your request to join your own team is awaiting approval.

If it was a restricted team, users wouldn't even see a link to join the team.

    >>> myemail.subscriptionpolicy = TeamSubscriptionPolicy.RESTRICTED
    >>> myemail.syncUpdate()

    >>> browser = setupBrowser(
    ...     auth='Basic jeff.waugh@ubuntulinux.com:test')
    >>> browser.open('http://launchpad.dev/~myemail')
    >>> browser.url
    'http://launchpad.dev/~myemail'
    >>> print extract_text(
    ...     find_tag_by_id(browser.contents, 'subscription-policy'))
    Subscription policy:
    Restricted Team

    >>> browser.getLink('Join the team')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

If the user manually craft the URL to the +join page, he'll only see a
message explaining that this is a restricted team.

    >>> browser.open('http://launchpad.dev/~myemail/+join')
    >>> browser.url
    'http://launchpad.dev/~myemail/+join'

    >>> for tag in find_tags_by_class(browser.contents, 'informational'):
    ...     print tag.renderContents()
    your own team is a restricted team.
    Only a team administrator can add new members.

But we provide a 'Back' button to take the user back to the team's
home page, since he can't join it.

    >>> browser.getLink('Back').click()
    >>> browser.url
    'http://launchpad.dev/~myemail'

On the team's +members page we can now see Karl as an approved member,
James Blackwell as a proposed one and Jeff Waugh won't be there at all.

    >>> anon_browser.open('http://launchpad.dev/~myemail')
    >>> anon_browser.getLink('All members').click()
    >>> anon_browser.url
    'http://launchpad.dev/~myemail/+members'

    >>> contents = anon_browser.contents
    >>> for link in find_tag_by_id(contents, 'activemembers').findAll('a'):
    ...     print link.renderContents()
    Karl Tilbury
    Sample Person

    >>> for link in find_tag_by_id(contents, 'proposedmembers').findAll('a'):
    ...     print link.renderContents()
    James Blackwell

= Managing team members =

On a team's +members page we can see all active members of that team, as
well as the former members and the ones which proposed themselves or that
have been invited.

    >>> def print_members(contents, type):
    ...     table = find_tag_by_id(contents, type)
    ...     for link in table.findAll('a'):
    ...         if link.renderContents() != 'Edit' and not link.find('img'):
    ...             contents = link.renderContents()
    ...             if isinstance(contents, str):
    ...                 contents = contents.decode('utf-8')
    ...             print contents.encode('ascii', 'replace')

    >>> browser.open('http://launchpad.dev/~landscape-developers')
    >>> browser.getLink('All members').click()
    >>> browser.url
    'http://launchpad.dev/~landscape-developers/+members'

    >>> print_members(browser.contents, 'activemembers')
    Guilherme Salgado
    Sample Person

    >>> print_members(browser.contents, 'invitedmembers')
    Launchpad Developers

    >>> print_members(browser.contents, 'proposedmembers')
    Foo Bar

Former members are only viewable by admins of the team.

    >>> print find_tag_by_id(browser.contents, 'inactivemembers')
    None

    >>> name12_browser = setupBrowser(
    ...     auth="Basic test@canonical.com:test")
    >>> name12_browser.open(browser.url)
    >>> print_members(name12_browser.contents, 'inactivemembers')
    Karl Tilbury
    No Privileges Person

The list of active members and former (inactive) members can grow
without bounds, so they are paginated.

    >>> browser.open('http://launchpad.dev/~admins/+members')
    >>> print_members(browser.contents, 'activemembers')
    Andrew Bennetts
    Carlos Perell? Mar?n
    Dafydd Harries
    Daniel Henrique Debonzi
    Daniel Silverstone
    >>> browser.getLink('Next').click()
    >>> print_members(browser.contents, 'activemembers')
    Foo Bar
    Guilherme Salgado
    Mark Shuttleworth
    Robert Collins
    Steve Alexander

    # The ~admins team doesn't have enough inactive members to overflow
    # the default batch size of 5; set the max batch size to 2.
    >>> from lp.services.config import config
    >>> config.push('default-batch-size', """
    ... [launchpad]
    ... default_batch_size: 2
    ... """)
    >>> admin_browser.open(
    ...     'http://launchpad.dev/~admins/+members?inactive_batch=2')
    >>> print_members(admin_browser.contents, 'inactivemembers')
    Celso Providelo
    David Allouche
    >>> admin_browser.getLink('Next', index=2).click()
    >>> print_members(admin_browser.contents, 'inactivemembers')
    James Blackwell
    >>> config_data = config.pop('default-batch-size')


== Approving a proposed member ==

James Blackwell wants to join the team and we know he made some contributions
in the past, so we'll approve his membership.

    >>> browser = setupBrowser(auth='Basic test@canonical.com:test')
    >>> browser.open('http://launchpad.dev/~myemail/+members')
    >>> print_members(browser.contents, 'proposedmembers')
    James Blackwell

    >>> browser.open('http://launchpad.dev/~myemail/+member/jblack')
    >>> browser.url
    'http://launchpad.dev/~myemail/+member/jblack'

    >>> browser.getControl(name='membership.expirationdate').value = \
    ...     '2048-04-14'
    >>> browser.getControl(name='approve').click()

    >>> browser.url
    'http://launchpad.dev/~myemail/+members'

    >>> print_members(browser.contents, 'activemembers')
    James Blackwell
    Karl Tilbury
    Sample Person

== Promoting/Demoting an existing member ==

We'll now promote jblack to an administrator of this team.

    >>> browser.open('http://launchpad.dev/~myemail/+member/jblack')
    >>> browser.url
    'http://launchpad.dev/~myemail/+member/jblack'

    >>> browser.getControl(name='admin').value
    ['no']
    >>> browser.getControl(name='admin').value = ["yes"]
    >>> browser.getControl(name='change').click()

    >>> browser.open('http://launchpad.dev/~myemail/+member/jblack')
    >>> browser.getControl(name='admin').value
    ['yes']

We can also demote him if he doesn't behave himself.

    >>> browser.getControl(name='admin').value = ["no"]
    >>> browser.getControl(name='change').click()

    >>> browser.open('http://launchpad.dev/~myemail/+member/jblack')
    >>> browser.getControl(name='admin').value
    ['no']

== Deactivating an existing member ==

Karl Tilbury has made no contributions lately, so we'll deactivate his
membership for now.

    # We want to test concurrency here, so keep two browsers around:
    # XXX: Guilherme Salgado 2007-02-28 bug=68655:
    # It would be nice to be able to clone the browser and not do
    # the manual copy.
    >>> browser2 = setupBrowser(auth="Basic test@canonical.com:test")
    >>> browser2.open("http://launchpad.dev/~myemail/+member/karl")

    >>> browser.open("http://launchpad.dev/~myemail/+member/karl")
    >>> browser.getControl('Deactivate').click()
    >>> browser.url
    'http://launchpad.dev/~myemail/+members'

    >>> print_members(browser.contents, 'inactivemembers')
    Karl Tilbury

Attempt to deactivate the user again using our original browser2
instance. No crashes in sight:

  >>> browser2.getControl('Deactivate').click()
  >>> browser2.url
  'http://launchpad.dev/~myemail/+members'

== Reactivating a deactivated member ==

Later we may decide to reactivate Karl Tilbury's membership, so this must be
possible.

    # Again, keep a second browser open to test concurrency.
    >>> browser2.open("http://launchpad.dev/~myemail/+member/karl")

    >>> browser.open("http://launchpad.dev/~myemail/+member/karl")
    >>> browser.getControl(name="expires").value = ["date"]
    >>> browser.getControl(name="membership.expirationdate").value = \
    ...     '2049-04-16'
    >>> browser.getControl("Reactivate").click()

    >>> browser.url
    'http://launchpad.dev/~myemail/+members'

    >>> print find_tag_by_id(browser.contents, 'inactivemembers')
    None
    >>> print_members(browser.contents, 'activemembers')
    James Blackwell
    Karl Tilbury
    Sample Person

A second submission for reactivation should not crash but will print an
error message:

    >>> browser2.getControl(name="expires").value = ["date"]
    >>> browser2.getControl(name="membership.expirationdate").value = \
    ...     '2049-04-16'
    >>> browser2.getControl("Reactivate").click()
    >>> browser2.url
    'http://launchpad.dev/%7Emyemail/+member/karl/+index'
    >>> for tag in find_tags_by_class(browser2.contents, 'error message'):
    ...     print tag.renderContents()
    The membership request for Karl Tilbury has already been processed.
