#!/usr/bin/python -S
#
# Copyright 2009 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Queue management script

Tool for handling and visualisation of upload queue records.
"""

import _pythonpath

import transaction

from lp.services.config import config
from lp.services.scripts.base import (
    LaunchpadScript,
    LaunchpadScriptFailure,
    )
from lp.soyuz.scripts.queue import (
    CommandRunner,
    CommandRunnerError,
    name_queue_map,
    )


class QueueScript(LaunchpadScript):

    usage = 'Usage: %prog [options] <command>'

    def add_my_options(self):
        self.parser.add_option(
            "-Q", "--queue",
            dest="queue_name", metavar="QUEUE", default="new",
            help="Which queue to consider")

        self.parser.add_option(
            "-d", "--distribution",
            dest="distribution_name", metavar="DISTRO", default=None,
            help="Which distro to look in")

        self.parser.add_option(
            "-s", "--suite",
            dest="suite_name", metavar="DISTRORELEASE", default=None,
            help=("Which distrorelease to look in, defaults "
                  "to distribution 'currentseries'."))

        self.parser.add_option(
            "-N", "--dry-run", action="store_true",
            dest="dryrun", metavar="DRY_RUN", default=False,
            help="Whether to treat this as a dry-run or not.")

        self.parser.add_option(
            "-M", "--no-mail", action="store_true",
            dest="nomail", metavar="NO_MAIL", default=False,
            help="Whether to send announce email or not.")

        self.parser.add_option(
            "-e", "--exact-match", action="store_true",
            dest="exact_match", metavar="EXACTMATCH", default=False,
            help="Whether treat filter as a exact match or not.")

        self.parser.add_option(
            "-i", "--ignore-errors", action="store_true",
            dest="ignore_errors", metavar="IGNOREERRORS", default=False,
            help="Ignore errors when performing a list of commands.")

        self.parser.add_option(
            "-f", "--file", metavar="FILE", default=None,
            help="file containing a sequence of command lines.")

        self.parser.add_option(
            "-c", "--component", dest="component_name",
            metavar="COMPONENT", default=None,
            help="When overriding, move package to COMPONENT")

        self.parser.add_option(
            "-x", "--section", dest="section_name",
            metavar="SECTION", default=None,
            help="When overriding, move package to SECTION")

        self.parser.add_option(
            "-p", "--priority", dest="priority_name",
            metavar="PRIORITY", default=None,
            help="When overriding, move package to PRIORITY")

    def main(self):
        if self.options.queue_name not in name_queue_map:
            self.parser.error(
                'Unable to map queue name "%s"' % self.options.queue_name)

        no_mail = self.options.dryrun or self.options.nomail
        queue = name_queue_map[self.options.queue_name]

        if self.options.file:
            args_list = [self.args.strip().split() for args in
                         open(self.options.file).readlines()]
        else:
            args_list = [self.args]

        cmd_runner = CommandRunner(
            queue, self.options.distribution_name, self.options.suite_name,
            no_mail, self.options.component_name, self.options.section_name,
            self.options.priority_name, log=self.logger)

        print "Initializing connection to queue %s" % self.options.queue_name

        for single_args in args_list:
            try:
                cmd_runner.execute(single_args, self.options.exact_match)
            except CommandRunnerError, info:
                print (info)
                if self.options.ignore_errors:
                    continue
                transaction.abort()
                raise LaunchpadScriptFailure(
                    'Error encountered -- aborting current transaction')
            else:
                if not self.options.dryrun:
                    transaction.commit()
                else:
                    print "DRY RUN requested, not committing."

if __name__ == '__main__':
    QueueScript('queue', config.uploadqueue.dbuser).run()
